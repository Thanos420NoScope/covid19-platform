{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode';\n\nconst config = require('../config.json');\n\nconst fs = require('fs');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      txObj: {\n        0: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        1: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        2: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        3: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        4: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        5: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        6: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        7: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        8: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        9: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        }\n      },\n      txStatus: \"\"\n    };\n\n    this.downloadURI = async (uri, name) => {\n      var link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.generateQR = async text => {\n      try {\n        const qr = await QRCode.toDataURL(text);\n        return qr;\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.printQRss = async (qrs, brand, model, keysChainArr) => {\n      const date = new Date().toISOString().slice(0, 10);\n      await qrs.map(async (qr, i) => {\n        const keysChain = JSON.parse(keysChainArr[i]);\n        await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`);\n      });\n      return;\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.printQRs = async (brand, model) => {\n      const date = new Date().toISOString().slice(0, 10); //do for all 10 chains\n      //i is the chainId\n\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const qrs = tx[i].qrs;\n        qrs.map(async (qr, j) => {\n          console.log(tx[i][\"keypairs\"]);\n          console.log(tx[i][\"keypairs\"][j]);\n          await this.downloadURI(qr, `${brand}-${model}-${date}-c${i}-${tx[i][\"keypairs\"][j].publicKey.substring(0, 6)}.png`);\n        });\n      }\n    };\n\n    this.pollTxs = async () => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const reqKey = tx[i].reqKey; //check kadena tx status every 10 seconds until we get a response (success or fail)\n\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey]\n          }, createAPIHost(hosts[0], i.toString()));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            time = time - 10;\n            await this.wait(10000);\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey].result.status === \"success\") {\n          console.log('great success', i);\n          tx[i].pollRes = pollRes; // await this.printQRs(qrs, brand, model, keysChain);\n\n          await this.setState({\n            txObj: tx\n          }); //tx unsuccessful\n        } else {\n          console.log(\"error\", i);\n          console.log(pollRes); //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n\n          alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`);\n          window.location.reload();\n        }\n      }\n    };\n\n    this.mkSend = async (pubKey, privKey) => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const pactCode = tx[i].pactCode.join(\" \");\n        const reqKey = await Pact.fetch.send({\n          networkId: \"testnet04\",\n          pactCode: pactCode,\n          keyPairs: [{ ...config.covidAdminKeys,\n            clist: {\n              name: \"coin.GAS\",\n              args: []\n            }\n          }, {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: {\n              name: \"user.covid.PRINTING-ENTITY\",\n              args: [pubKey]\n            }\n          }],\n          meta: Pact.lang.mkMeta(\"covid-admin\", i.toString(), 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800),\n          envData: tx[i].envData\n        }, createAPIHost(hosts[0], i.toString()));\n\n        if (reqKey) {\n          tx[i].reqKey = reqKey.requestKeys[0];\n          console.log(reqKey, i);\n          await this.setState({\n            txObj: tx\n          });\n        } else {\n          //blockchain call had formatting issues\n          //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n          alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`);\n          window.location.reload();\n        }\n      }\n    };\n\n    this.formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n      for (let i = 0; i < parseInt(amount); i++) {\n        const tx = this.state.txObj;\n        const keypair = Pact.crypto.genKeyPair();\n        const chainId = keypair.publicKey.replace(/\\D/g, '')[0];\n        const qrData = JSON.stringify({\n          keypair,\n          chainId: chainId\n        });\n        const qr = await this.generateQR(qrData);\n        tx[chainId] = {\n          pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n          keypairs: [...tx[chainId].keypairs, keypair],\n          qrs: [...tx[chainId].qrs, qr],\n          envData: { ...tx[chainId].envData,\n            [i]: {\n              \"pred\": \"keys-all\",\n              \"keys\": [keypair.publicKey]\n            }\n          },\n          reqKey: \"\",\n          pollRes: []\n        };\n        await this.setState({\n          txObj: tx\n        });\n      }\n    };\n\n    this.registerTests = async (brand, model, amount, pubKey, privKey) => {\n      await this.setState({\n        loading: true\n      });\n      await this.formatTxObj(brand, model, amount, pubKey, privKey);\n      await this.mkSend(pubKey, privKey);\n      await this.pollTxs();\n      await this.printQRs(brand, model); // await this.wait(5000)\n\n      await this.setState({\n        txStatus: \"success\"\n      }); // alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\")\n      // window.location.reload();\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        registerTests: this.registerTests\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js"],"names":["React","Pact","QRCode","config","require","fs","Context","createContext","hosts","createAPIHost","network","chainId","PactStore","Component","state","loading","txObj","pactCode","keypairs","qrs","envData","reqKey","pollRes","txStatus","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","generateQR","text","qr","toDataURL","err","console","error","printQRss","brand","model","keysChainArr","date","Date","toISOString","slice","map","i","keysChain","JSON","parse","keypair","publicKey","substring","wait","timeout","Promise","resolve","setTimeout","printQRs","tx","length","j","log","pollTxs","time","fetch","poll","requestKeys","toString","Object","keys","result","status","setState","alert","window","location","reload","mkSend","pubKey","privKey","join","send","networkId","keyPairs","covidAdminKeys","clist","args","secretKey","meta","lang","mkMeta","Math","round","getTime","formatTxObj","amount","parseInt","crypto","genKeyPair","replace","qrData","stringify","registerTests","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode'\nconst config = require('../config.json')\nconst fs = require('fs')\n\nconst Context = React.createContext();\n\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false,\n    txObj: {\n      0: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      1: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      2: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      3: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      4: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      5: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      6: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      7: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      8: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      9: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} }\n    },\n    txStatus: \"\"\n  }\n\n  downloadURI = async (uri, name) => {\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  generateQR = async text => {\n    try {\n      const qr = await QRCode.toDataURL(text)\n      return qr\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  printQRss = async (qrs, brand, model, keysChainArr) => {\n    const date = new Date().toISOString().slice(0,10)\n    await qrs.map(async (qr, i) => {\n      const keysChain = JSON.parse(keysChainArr[i])\n      await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`)\n    })\n    return\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  printQRs = async (brand, model) => {\n    const date = new Date().toISOString().slice(0,10)\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++) {\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const qrs = tx[i].qrs;\n      qrs.map(async (qr, j) => {\n        console.log(tx[i][\"keypairs\"])\n        console.log(tx[i][\"keypairs\"][j])\n        await this.downloadURI(qr, `${brand}-${model}-${date}-c${i}-${tx[i][\"keypairs\"][j].publicKey.substring(0, 6)}.png`)\n      })\n    }\n  }\n\n  pollTxs = async () => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const reqKey = tx[i].reqKey\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey]}, createAPIHost(hosts[0], i.toString()));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          time = time - 10\n          await this.wait(10000);\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      //tx successful\n      if (pollRes[reqKey].result.status === \"success\"){\n        console.log('great success', i)\n        tx[i].pollRes = pollRes;\n        // await this.printQRs(qrs, brand, model, keysChain);\n        await this.setState({ txObj: tx })\n      //tx unsuccessful\n      } else {\n        console.log(\"error\", i)\n        console.log(pollRes)\n        //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n        alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`)\n        window.location.reload()\n      }\n    }\n  }\n\n  mkSend = async (pubKey, privKey) => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const pactCode = tx[i].pactCode.join(\" \");\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: pactCode,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n        meta: Pact.lang.mkMeta(\"covid-admin\",i.toString(),0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800),\n        envData: tx[i].envData\n      }, createAPIHost(hosts[0], i.toString()));\n      if (reqKey) {\n        tx[i].reqKey = reqKey.requestKeys[0];\n        console.log(reqKey, i)\n        await this.setState({ txObj: tx });\n      } else {\n        //blockchain call had formatting issues\n        //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n        alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`)\n        window.location.reload();\n      }\n    }\n  }\n\n  formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n    for (let i = 0; i < parseInt(amount); i++) {\n      const tx = this.state.txObj;\n      const keypair = Pact.crypto.genKeyPair();\n      const chainId = keypair.publicKey.replace(/\\D/g,'')[0];\n      const qrData = JSON.stringify({keypair, chainId: chainId});\n      const qr = await this.generateQR(qrData);\n      tx[chainId] = {\n        pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n        keypairs: [...tx[chainId].keypairs, (keypair)],\n        qrs: [...tx[chainId].qrs, qr],\n        envData: {...tx[chainId].envData, [i]: {\"pred\": \"keys-all\", \"keys\": [keypair.publicKey]}},\n        reqKey: \"\",\n        pollRes: [],\n      }\n      await this.setState({ txObj: tx });\n    }\n  }\n\n  registerTests = async (brand, model, amount, pubKey, privKey) => {\n    await this.setState({ loading: true });\n    await this.formatTxObj(brand, model, amount, pubKey, privKey);\n    await this.mkSend(pubKey, privKey);\n    await this.pollTxs();\n    await this.printQRs(brand, model)\n    // await this.wait(5000)\n    await this.setState({ txStatus: \"success\" })\n    // alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\")\n    // window.location.reload();\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          registerTests: this.registerTests\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}