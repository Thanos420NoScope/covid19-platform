{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode';\n\nconst config = require('../config.json');\n\nconst fs = require('fs');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false\n    };\n\n    this.downloadURI = async (uri, name) => {\n      var link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.generateQR = async text => {\n      try {\n        const qr = await QRCode.toDataURL(text);\n        return qr;\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.printQRs = async (qrs, brand, model, keysChainArr) => {\n      const date = new Date().toISOString().slice(0, 10);\n      qrs.map(async (qr, i) => {\n        const keysChain = JSON.parse(keysChainArr[i]);\n        await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`);\n      });\n      return;\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.registerTests = async (brand, model, amount, pubKey, privKey) => {\n      await this.setState({\n        loading: true\n      });\n      let pactCode = [];\n      let keysChain = [];\n      let qrs = [];\n      let envData = {};\n\n      for (let i = 0; i < parseInt(amount); i++) {\n        const keypair = Pact.crypto.genKeyPair();\n        const chainId = \"0\"; //change this to be based on the public key\n\n        const qrData = JSON.stringify({\n          keypair,\n          chainId: chainId\n        });\n        keysChain.push(qrData);\n        const qr = await this.generateQR(qrData);\n        qrs.push(qr);\n        pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`);\n        envData[i] = {\n          \"pred\": \"keys-all\",\n          \"keys\": [keypair.publicKey]\n        };\n      }\n\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: pactCode.join(\" \"),\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, {\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: {\n            name: \"user.covid.PRINTING-ENTITY\",\n            args: [pubKey]\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"covid-admin\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800),\n        envData: envData\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], \"0\"));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          console.log('great success');\n          await this.printQRs(qrs, brand, model, keysChain);\n          await this.setState({\n            loading: false\n          });\n          alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\");\n          window.location.reload(); //tx unsuccessful\n        } else {\n          console.log(pollRes);\n          await this.setState({\n            loading: false\n          });\n          alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\");\n          window.location.reload();\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false\n        });\n        alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\");\n        window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        registerTests: this.registerTests\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js"],"names":["React","Pact","QRCode","config","require","fs","Context","createContext","hosts","createAPIHost","network","chainId","PactStore","Component","state","loading","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","generateQR","text","qr","toDataURL","err","console","error","printQRs","qrs","brand","model","keysChainArr","date","Date","toISOString","slice","map","i","keysChain","JSON","parse","keypair","publicKey","substring","wait","timeout","Promise","resolve","setTimeout","registerTests","amount","pubKey","privKey","setState","pactCode","envData","parseInt","crypto","genKeyPair","qrData","stringify","push","toString","reqKey","fetch","send","networkId","join","keyPairs","covidAdminKeys","clist","args","secretKey","meta","lang","mkMeta","Math","round","getTime","time","pollRes","poll","requestKeys","Object","keys","length","log","result","status","alert","window","location","reload","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode'\nconst config = require('../config.json')\nconst fs = require('fs')\n\nconst Context = React.createContext();\n\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false\n  }\n\n  downloadURI = async (uri, name) => {\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  generateQR = async text => {\n    try {\n      const qr = await QRCode.toDataURL(text)\n      return qr\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  printQRs = async (qrs, brand, model, keysChainArr) => {\n    const date = new Date().toISOString().slice(0,10)\n    qrs.map(async (qr, i) => {\n      const keysChain = JSON.parse(keysChainArr[i])\n      await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`)\n    })\n    return\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  registerTests = async (brand, model, amount, pubKey, privKey) => {\n    await this.setState({ loading: true })\n    let pactCode = [];\n    let keysChain = [];\n    let qrs = []\n    let envData = {};\n    for (let i = 0; i < parseInt(amount); i++) {\n      const keypair = Pact.crypto.genKeyPair();\n      const chainId = \"0\" //change this to be based on the public key\n      const qrData = JSON.stringify({keypair, chainId: chainId})\n      keysChain.push(qrData);\n      const qr = await this.generateQR(qrData);\n      qrs.push(qr)\n      pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`)\n      envData[i] = {\"pred\": \"keys-all\", \"keys\": [keypair.publicKey]}\n    }\n    const reqKey = await Pact.fetch.send({\n      networkId: \"testnet04\",\n      pactCode: pactCode.join(\" \"),\n      keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n      meta: Pact.lang.mkMeta(\"covid-admin\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800),\n      envData: envData\n    }, createAPIHost(hosts[0], \"0\"));\n    if (reqKey) {\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        await this.wait(10000);\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], \"0\"));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          console.log(pollRes)\n          time = time - 10\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      //tx successful\n      if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n        console.log('great success')\n        await this.printQRs(qrs, brand, model, keysChain);\n        await this.setState({ loading: false })\n        alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\")\n        window.location.reload();\n      //tx unsuccessful\n      } else {\n        console.log(pollRes)\n        await this.setState({ loading: false })\n        alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\")\n        window.location.reload();\n      }\n    } else {\n      //blockchain call had formatting issues\n      await this.setState({ loading: false })\n      alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\")\n      window.location.reload();\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          registerTests: this.registerTests\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}