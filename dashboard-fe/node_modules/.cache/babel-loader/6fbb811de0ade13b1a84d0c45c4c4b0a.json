{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\n\nconst config = require('../config.json');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.registerTests = async (brand, model, amount, pubKey, privKey) => {\n      let pactCode = [];\n      let keypairs = [];\n\n      for (let i = 0; i < parseInt(amount) - 1; i++) {\n        const keypair = Pact.crypto.genKeyPair();\n        keypairs.push(keypair);\n        pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(brand)} ${JSON.stringify(model)})`);\n      }\n\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: pactCode.join(\" \"),\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, {\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: {\n            name: \"user.covid.PRINTING-ENTITY\",\n            args: [pubKey]\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"covid-admin\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], \"0\"));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          console.log('great success'); //doc registered on blockchain, now add to db\n          // await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n          // alert(\"The test was successfuly registered on Kadena mainnet\")\n          //SHOW A MESSAGE OF SUCCESS\n          // window.location.reload();\n          //tx unsuccessful\n        } else {\n          console.log('er'); // await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n          // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n          // window.location.reload();\n        }\n      } else {\n        console.log('errrrr'); //blockchain call had formatting issues\n        // await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n        // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n        // window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        registerTests: this.registerTests\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js"],"names":["React","Pact","config","require","Context","createContext","hosts","createAPIHost","network","chainId","PactStore","Component","state","loading","wait","timeout","Promise","resolve","setTimeout","registerTests","brand","model","amount","pubKey","privKey","pactCode","keypairs","i","parseInt","keypair","crypto","genKeyPair","push","JSON","stringify","publicKey","reqKey","fetch","send","networkId","join","keyPairs","covidAdminKeys","clist","name","args","secretKey","meta","lang","mkMeta","Math","round","Date","getTime","time","pollRes","poll","requestKeys","Object","keys","length","console","log","result","status","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nconst config = require('../config.json')\n\nconst Context = React.createContext();\n\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  registerTests = async (brand, model, amount, pubKey, privKey) => {\n    let pactCode = [];\n    let keypairs = [];\n    for (let i = 0; i < parseInt(amount) - 1 ; i++) {\n      const keypair = Pact.crypto.genKeyPair();\n      keypairs.push(keypair);\n      pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(brand)} ${JSON.stringify(model)})`)\n    }\n    const reqKey = await Pact.fetch.send({\n      networkId: \"testnet04\",\n      pactCode: pactCode.join(\" \"),\n      keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n      meta: Pact.lang.mkMeta(\"covid-admin\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}\n      , createAPIHost(hosts[0], \"0\"));\n    if (reqKey) {\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        await this.wait(10000);\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], \"0\"));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          console.log(pollRes)\n          time = time - 10\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      //tx successful\n      if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n        console.log('great success')\n        //doc registered on blockchain, now add to db\n        // await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n        // alert(\"The test was successfuly registered on Kadena mainnet\")\n        //SHOW A MESSAGE OF SUCCESS\n        // window.location.reload();\n      //tx unsuccessful\n      } else {\n        console.log('er')\n        // await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n        // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n        // window.location.reload();\n      }\n    } else {\n      console.log('errrrr')\n      //blockchain call had formatting issues\n      // await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n      // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n      // window.location.reload();\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          registerTests: this.registerTests\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}