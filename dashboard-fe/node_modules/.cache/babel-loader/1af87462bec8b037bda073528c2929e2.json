{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/components/Inputs.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport '../App.css';\nimport { Button, Grid, Input, Icon, Form, List, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport PactContext from \"../contexts/PactContext\";\nimport QRCode from 'qrcode';\n\nconst Inputs = () => {\n  const pactContext = useContext(PactContext);\n  const [name, setName] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [num, setNum] = useState(\"\");\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n\n  function toKeyLoad() {\n    try {\n      var fileToLoad = document.getElementById(\"to-pub-file\").files[0];\n\n      if (fileToLoad.name.substr(fileToLoad.name.length - 4) !== \".kda\" || fileToLoad.name.includes(\"public\")) {\n        alert(`file must be a .kda private key file`);\n      }\n\n      var fileReader = new FileReader();\n\n      fileReader.onload = function (fileLoadedEvent) {\n        var textFromFileLoaded = fileLoadedEvent.target.result;\n        var keys = textFromFileLoaded.split(\"\\n\");\n        const pub = keys[0].replace(\"public: \", \"\");\n        const priv = keys[1].replace(\"secret: \", \"\");\n        checkKey(pub);\n        checkKey(priv);\n        setPubKey(pub);\n        setPrivKey(priv);\n      };\n\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\n    } catch (err) {\n      console.log(err);\n      alert(`file must be a .kda private key file`);\n    }\n  }\n\n  const is_hexadecimal = str => {\n    const regexp = /^[0-9a-fA-F]+$/;\n    if (regexp.test(str)) return true;else return false;\n  };\n\n  const checkKey = key => {\n    if (key.length !== 64) {\n      setError(true);\n      setErrMsg(\"Key length is invalid\");\n    } else if (!is_hexadecimal(key)) {\n      setError(true);\n      setErrMsg(\"Key format is invalid\");\n    } else {\n      setError(false);\n      setErrMsg(\"\");\n    }\n  };\n\n  const checkText = text => {\n    if (text === \"\") {\n      setError(true);\n      setErrMsg(\"Please to not leave field empty\");\n    } else {\n      setError(false);\n      setErrMsg(\"\");\n    }\n  };\n\n  const checkNum = num => {\n    if (num.match(/^-{0,1}\\d+$/)) {\n      setError(false);\n      setErrMsg(\"\");\n    } else {\n      setError(true);\n      setErrMsg(\"Please enter an integer for the amount of labels\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Form, {\n    style: {\n      marginBottom: 20,\n      marginTop: 10,\n      marginLeft: 100,\n      marginRight: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h1\",\n    textAlign: \"center\",\n    style: {\n      color: \"#054F9E\",\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Please fill the form below\"), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Enter Test Manufacturer Name\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"What is the Test Manufacturer Name? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"This is the name of the company to that produces or brands the test\"))), React.createElement(Form.Input, {\n    icon: \"building\",\n    iconPosition: \"left\",\n    placeholder: \"Manufacturer Name\",\n    value: name,\n    onChange: e => {\n      checkText(e.target.value);\n      setName(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Enter Test Model Name\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"What is the Test Model Name? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"This is the name that identifies this type of test within the manufacturer or brand\"))), React.createElement(Form.Input, {\n    icon: \"pencil alternate\",\n    iconPosition: \"left\",\n    placeholder: \"Model Name\",\n    value: model,\n    onChange: e => {\n      checkText(e.target.value);\n      setModel(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Amount of Test Labels to Print\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"What is the Test Model Name? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"This is the name that identifies this type of test within the manufacturer or brand\"))), React.createElement(Form.Input, {\n    icon: \"hashtag\",\n    iconPosition: \"left\",\n    placeholder: \"Label Amount\",\n    value: num,\n    onChange: e => {\n      checkNum(e.target.value);\n      setNum(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Sign Test Labels on Blockchain\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"What is Signing? \"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Enter your public and private key provided by Kadena to sign and generate QR codes\"))), React.createElement(Input, {\n    style: {\n      marginBottom: 5\n    },\n    placeholder: \"Public Key\",\n    icon: \"key\",\n    iconPosition: \"left\",\n    value: pubKey,\n    onChange: e => {\n      checkKey(e.target.value);\n      setPubKey(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    style: {\n      marginBottom: 0\n    },\n    placeholder: \"Private Key\",\n    icon: \"lock\",\n    iconPosition: \"left\",\n    type: \"password\",\n    value: privKey,\n    onChange: e => {\n      checkKey(e.target.value);\n      setPrivKey(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"to-pub-file\",\n    type: \"file\",\n    style: {\n      width: 180,\n      marginRight: 20\n    },\n    onChange: e => toKeyLoad(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      width: 180,\n      marginTop: 5\n    },\n    onClick: () => {\n      setPubKey('f176b58f0f368c5d6ef1ef6b38f420c42d11ac633791edd638c61a88614d6935');\n      setPrivKey('10e3f185e3323c62bfc229d5b839db277ea4f6800a075e5f21d500bb963b1555');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Use Testnet Keypair\"))), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      width: 360\n    },\n    onClick: () => {\n      setPubKey('f176b58f0f368c5d6ef1ef6b38f420c42d11ac633791edd638c61a88614d6935');\n      setPrivKey('10e3f185e3323c62bfc229d5b839db277ea4f6800a075e5f21d500bb963b1555');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Use Testnet Keypair\")), error ? React.createElement(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(Message, {\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    style: {\n      marginBottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"Input Error\"), errMsg)) : pactContext.loading ? React.createElement(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(Message, {\n    color: \"blue\",\n    style: {\n      marginTop: 30,\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(Message.Header, {\n    style: {\n      marginBottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"Please Do Not Refresh\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, \"We are registering the test labels on Kadena mainnet\"))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }), React.createElement(Form.Field, {\n    style: {\n      marginTop: \"0px\",\n      marginBottom: 10,\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: error || name === \"\" || model === \"\" || pubKey === \"\" || privKey === \"\",\n    loading: pactContext.loading,\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      width: 360\n    },\n    onClick: () => pactContext.registerTests(name, model, num, pubKey, privKey),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \"Sign and Generate QR Codes\"))))));\n};\n\nexport default Inputs;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/components/Inputs.js"],"names":["React","useState","useEffect","useContext","Button","Grid","Input","Icon","Form","List","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","Segment","PactContext","QRCode","Inputs","pactContext","name","setName","model","setModel","num","setNum","pubKey","setPubKey","privKey","setPrivKey","error","setError","errMsg","setErrMsg","toKeyLoad","fileToLoad","document","getElementById","files","substr","length","includes","alert","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","target","result","keys","split","pub","replace","priv","checkKey","readAsText","err","console","log","is_hexadecimal","str","regexp","test","key","checkText","text","checkNum","match","marginBottom","marginTop","marginLeft","marginRight","color","textAlign","e","value","width","backgroundColor","loading","registerTests"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport '../App.css';\nimport { Button, Grid, Input, Icon, Form, List,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport PactContext from \"../contexts/PactContext\";\n\nimport QRCode from 'qrcode'\n\nconst Inputs = () => {\n\n  const pactContext = useContext(PactContext);\n\n  const [name, setName] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [num, setNum] = useState(\"\");\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n\n  function toKeyLoad(){\n   try {\n     var fileToLoad = document.getElementById(\"to-pub-file\").files[0];\n     if (fileToLoad.name.substr(fileToLoad.name.length - 4) !== \".kda\" || fileToLoad.name.includes(\"public\")) {\n       alert(`file must be a .kda private key file`)\n     }\n     var fileReader = new FileReader();\n     fileReader.onload = function(fileLoadedEvent){\n         var textFromFileLoaded = fileLoadedEvent.target.result;\n         var keys = textFromFileLoaded.split(\"\\n\");\n         const pub = keys[0].replace(\"public: \", \"\");\n         const priv = keys[1].replace(\"secret: \", \"\")\n         checkKey(pub);\n         checkKey(priv);\n         setPubKey(pub);\n         setPrivKey(priv);\n     };\n     fileReader.readAsText(fileToLoad, \"UTF-8\");\n   } catch (err) {\n     console.log(err)\n     alert(`file must be a .kda private key file`)\n   }\n }\n\n const is_hexadecimal = (str) => {\n   const regexp = /^[0-9a-fA-F]+$/;\n   if (regexp.test(str)) return true;\n   else return false;\n  }\n\n const checkKey = (key) => {\n     if (key.length !== 64) {\n       setError(true)\n       setErrMsg(\"Key length is invalid\")\n     } else if (!is_hexadecimal(key)){\n       setError(true)\n       setErrMsg(\"Key format is invalid\")\n     } else {\n       setError(false)\n       setErrMsg(\"\")\n     }\n\n }\n\n const checkText = (text) => {\n   if (text === \"\") {\n     setError(true)\n     setErrMsg(\"Please to not leave field empty\")\n   } else {\n     setError(false)\n     setErrMsg(\"\")\n   }\n }\n\n const checkNum = (num) => {\n    if(num.match(/^-{0,1}\\d+$/)){\n      setError(false)\n      setErrMsg(\"\")\n    } else {\n      setError(true)\n      setErrMsg(\"Please enter an integer for the amount of labels\")\n    }\n  }\n\n\n  return (\n    <div>\n      <header className=\"App-header\">\n      <Segment>\n        <Form style={{marginBottom: 20, marginTop: 10, marginLeft: 100, marginRight: 100}}>\n          <Header as='h1'  textAlign='center' style={{color: \"#054F9E\", marginBottom: 20 }}>\n            Please fill the form below\n          </Header>\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <label style={{color: \"#054F9E\" }}>Enter Test Manufacturer Name\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n              <Popup.Header>What is the Test Manufacturer Name? </Popup.Header>\n              <Popup.Content>This is the name of the company to that produces or brands the test</Popup.Content>\n              </Popup>\n            </label>\n            <Form.Input\n              icon='building'\n              iconPosition='left'\n              placeholder='Manufacturer Name'\n              value={name}\n              onChange={(e) => {\n                checkText(e.target.value)\n                setName(e.target.value)\n              }}\n            />\n          </Form.Field>\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <label style={{color: \"#054F9E\" }}>Enter Test Model Name\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n              <Popup.Header>What is the Test Model Name? </Popup.Header>\n              <Popup.Content>This is the name that identifies this type of test within the manufacturer or brand</Popup.Content>\n              </Popup>\n            </label>\n            <Form.Input\n              icon='pencil alternate'\n              iconPosition='left'\n              placeholder='Model Name'\n              value={model}\n              onChange={(e) => {\n                checkText(e.target.value)\n                setModel(e.target.value)\n              }}\n            />\n          </Form.Field>\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <label style={{color: \"#054F9E\" }}>Amount of Test Labels to Print\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n              <Popup.Header>What is the Test Model Name? </Popup.Header>\n              <Popup.Content>This is the name that identifies this type of test within the manufacturer or brand</Popup.Content>\n              </Popup>\n            </label>\n            <Form.Input\n              icon='hashtag'\n              iconPosition='left'\n              placeholder='Label Amount'\n              value={num}\n              onChange={(e) => {\n                checkNum(e.target.value)\n                setNum(e.target.value)\n              }}\n            />\n          </Form.Field>\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <label style={{color: \"#054F9E\" }}>Sign Test Labels on Blockchain\n              <Popup\n                trigger={\n                  <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                }\n                position='top center'\n              >\n              <Popup.Header>What is Signing? </Popup.Header>\n              <Popup.Content>Enter your public and private key provided by Kadena to sign and generate QR codes</Popup.Content>\n              </Popup>\n            </label>\n            <Input\n              style={{marginBottom: 5}}\n              placeholder='Public Key'\n              icon=\"key\"\n              iconPosition=\"left\"\n              value={pubKey}\n              onChange={(e) => {\n                checkKey(e.target.value)\n                setPubKey(e.target.value)\n              }}\n            />\n            <Form.Input\n              style={{marginBottom: 0}}\n              placeholder='Private Key'\n              icon=\"lock\"\n              iconPosition=\"left\"\n              type='password'\n              value={privKey}\n              onChange={(e) => {\n                checkKey(e.target.value)\n                setPrivKey(e.target.value)\n              }}\n            />\n            <div style={{marginBottom: 20}}>\n              <input\n                  id=\"to-pub-file\"\n                  type=\"file\"\n                  style={{width: 180, marginRight: 20}}\n                  onChange={(e) => toKeyLoad()}/>\n              <Button\n                style={{\n                backgroundColor: \"#054F9E\",\n                color: \"white\",\n                width: 180,\n                marginTop: 5\n                }}\n                onClick={() => {\n                  setPubKey('f176b58f0f368c5d6ef1ef6b38f420c42d11ac633791edd638c61a88614d6935');\n                  setPrivKey('10e3f185e3323c62bfc229d5b839db277ea4f6800a075e5f21d500bb963b1555');\n                }}\n              >\n                Use Testnet Keypair\n              </Button>\n            </div>\n\n          </Form.Field>\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <Button\n              style={{\n              backgroundColor: \"#054F9E\",\n              color: \"white\",\n              width: 360,\n              }}\n              onClick={() => {\n                setPubKey('f176b58f0f368c5d6ef1ef6b38f420c42d11ac633791edd638c61a88614d6935');\n                setPrivKey('10e3f185e3323c62bfc229d5b839db277ea4f6800a075e5f21d500bb963b1555');\n              }}\n            >\n              Use Testnet Keypair\n            </Button>\n          </Form.Field>\n          {error ?\n            <div style={{marginBottom: 20}}>\n              <Message color='red'>\n                <Message.Header style={{marginBottom: 5}}>\n                  Input Error\n                </Message.Header>\n                {errMsg}\n              </Message>\n            </div>\n          : (pactContext.loading ?\n            <div style={{marginBottom: 20}}>\n              <Message color=\"blue\" style={{marginTop:30, textAlign: 'center'}} >\n                <Message.Header style={{marginBottom: 5}}>\n                  Please Do Not Refresh\n                </Message.Header>\n                <div>\n                  We are registering the test labels on Kadena mainnet\n                </div>\n              </Message>\n            </div>\n            : <div></div>)}\n          <Form.Field  style={{marginTop: \"0px\", marginBottom: 10, textAlign: \"left\"}} >\n            <Button\n              disabled={error || name === \"\" || model === \"\" || pubKey === \"\" || privKey === \"\"}\n              loading={pactContext.loading}\n              style={{\n              backgroundColor: \"#054F9E\",\n              color: \"white\",\n              width: 360,\n              }}\n              onClick={() => pactContext.registerTests(name, model, num, pubKey, privKey)}\n            >\n              Sign and Generate QR Codes\n            </Button>\n          </Form.Field>\n        </Form>\n        </Segment>\n      </header>\n    </div>\n  );\n\n}\n\nexport default Inputs;\n"]},"metadata":{},"sourceType":"module"}