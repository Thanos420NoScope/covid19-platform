{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode';\n\nconst config = require('../config.json');\n\nconst fs = require('fs');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      txObj: {\n        0: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        1: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        2: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        3: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        4: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        5: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        6: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        7: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        8: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        9: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        }\n      }\n    };\n\n    this.downloadURI = async (uri, name) => {\n      var link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.generateQR = async text => {\n      try {\n        const qr = await QRCode.toDataURL(text);\n        return qr;\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.printQRss = async (qrs, brand, model, keysChainArr) => {\n      const date = new Date().toISOString().slice(0, 10);\n      qrs.map(async (qr, i) => {\n        const keysChain = JSON.parse(keysChainArr[i]);\n        await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`);\n      });\n      return;\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.printQRs = async (brand, model) => {\n      const date = new Date().toISOString().slice(0, 10); //do for all 10 chains\n      //i is the chainId\n\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n      }\n    };\n\n    this.pollTxs = async () => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const reqKey = tx[i].reqKey; //check kadena tx status every 10 seconds until we get a response (success or fail)\n\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey]\n          }, createAPIHost(hosts[0], i.toString()));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n\n          await this.wait(10000);\n        } //tx successful\n\n\n        if (pollRes[reqKey].result.status === \"success\") {\n          console.log('great success', i);\n          tx[i].pollRes = pollRes; // await this.printQRs(qrs, brand, model, keysChain);\n\n          await this.setState({\n            txObj: tx\n          }); //tx unsuccessful\n        } else {\n          console.log(\"error\", i);\n          console.log(pollRes); //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n          // await this.setState({ loading: false })\n          // alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`)\n          // window.location.reload()\n        }\n      }\n    };\n\n    this.mkSend = async (pubKey, privKey) => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const pactCode = tx[i].pactCode.join(\" \");\n        const reqKey = await Pact.fetch.send({\n          networkId: \"testnet04\",\n          pactCode: pactCode,\n          keyPairs: [{ ...config.covidAdminKeys,\n            clist: {\n              name: \"coin.GAS\",\n              args: []\n            }\n          }, {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: {\n              name: \"user.covid.PRINTING-ENTITY\",\n              args: [pubKey]\n            }\n          }],\n          meta: Pact.lang.mkMeta(\"covid-admin\", i.toString(), 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800),\n          envData: tx[i].envData\n        }, createAPIHost(hosts[0], i.toString()));\n\n        if (reqKey) {\n          tx[i].reqKey = reqKey.requestKeys[0];\n          console.log(reqKey, i);\n          await this.setState({\n            txObj: tx\n          });\n        } else {\n          //blockchain call had formatting issues\n          //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n          await this.setState({\n            loading: false\n          });\n          alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`);\n          window.location.reload();\n        }\n      }\n    };\n\n    this.formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n      for (let i = 0; i < parseInt(amount); i++) {\n        const tx = this.state.txObj;\n        const keypair = Pact.crypto.genKeyPair();\n        const chainId = keypair.publicKey.replace(/\\D/g, '')[0];\n        const qrData = JSON.stringify({\n          keypair,\n          chainId: chainId\n        });\n        const qr = await this.generateQR(qrData);\n        tx[chainId] = {\n          pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n          keypairs: [...tx[chainId].keypairs, keypair],\n          qrs: [...tx[chainId].qrs, qr],\n          envData: { ...tx[chainId].envData,\n            [i]: {\n              \"pred\": \"keys-all\",\n              \"keys\": [keypair.publicKey]\n            }\n          },\n          reqKey: \"\",\n          pollRes: []\n        };\n        await this.setState({\n          txObj: tx\n        });\n      }\n    };\n\n    this.registerTests = async (brand, model, amount, pubKey, privKey) => {\n      await this.setState({\n        loading: true\n      });\n      await this.formatTxObj(brand, model, amount, pubKey, privKey);\n      console.log(this.state.txObj);\n      await this.mkSend(pubKey, privKey);\n      console.log(this.state.txObj);\n      await this.pollTxs();\n      console.log(this.state.txObj);\n    };\n\n    this.registerTestssss = async (brand, model, amount, pubKey, privKey) => {\n      await this.setState({\n        loading: true\n      });\n      let pactCode = [];\n      let keysChain = [];\n      let qrs = [];\n      let envData = {};\n\n      for (let i = 0; i < parseInt(amount); i++) {\n        const keypair = Pact.crypto.genKeyPair(); //take first digit in public key to be chain id\n\n        const chainId = keypair.publicKey.replace(/\\D/g, '')[0];\n        const qrData = JSON.stringify({\n          keypair,\n          chainId: chainId\n        });\n        keysChain.push(qrData);\n        const qr = await this.generateQR(qrData);\n        qrs.push(qr);\n        pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`);\n        envData[i] = {\n          \"pred\": \"keys-all\",\n          \"keys\": [keypair.publicKey]\n        };\n      }\n\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: pactCode.join(\" \"),\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, {\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: {\n            name: \"user.covid.PRINTING-ENTITY\",\n            args: [pubKey]\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"covid-admin\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800),\n        envData: envData\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], \"0\"));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          console.log('great success');\n          await this.printQRs(qrs, brand, model, keysChain);\n          await this.setState({\n            loading: false\n          });\n          alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\");\n          window.location.reload(); //tx unsuccessful\n        } else {\n          console.log(pollRes);\n          await this.setState({\n            loading: false\n          });\n          alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\");\n          window.location.reload();\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false\n        });\n        alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\");\n        window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        registerTests: this.registerTests\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js"],"names":["React","Pact","QRCode","config","require","fs","Context","createContext","hosts","createAPIHost","network","chainId","PactStore","Component","state","loading","txObj","pactCode","keypairs","qrs","envData","reqKey","pollRes","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","generateQR","text","qr","toDataURL","err","console","error","printQRss","brand","model","keysChainArr","date","Date","toISOString","slice","map","i","keysChain","JSON","parse","keypair","publicKey","substring","wait","timeout","Promise","resolve","setTimeout","printQRs","tx","length","pollTxs","time","fetch","poll","requestKeys","toString","Object","keys","log","result","status","setState","mkSend","pubKey","privKey","join","send","networkId","keyPairs","covidAdminKeys","clist","args","secretKey","meta","lang","mkMeta","Math","round","getTime","alert","window","location","reload","formatTxObj","amount","parseInt","crypto","genKeyPair","replace","qrData","stringify","registerTests","registerTestssss","push","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode'\nconst config = require('../config.json')\nconst fs = require('fs')\n\nconst Context = React.createContext();\n\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false,\n    txObj: {\n      0: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      1: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      2: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      3: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      4: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      5: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      6: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      7: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      8: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      9: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} }\n    }\n  }\n\n  downloadURI = async (uri, name) => {\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  generateQR = async text => {\n    try {\n      const qr = await QRCode.toDataURL(text)\n      return qr\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  printQRss = async (qrs, brand, model, keysChainArr) => {\n    const date = new Date().toISOString().slice(0,10)\n    qrs.map(async (qr, i) => {\n      const keysChain = JSON.parse(keysChainArr[i])\n      await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`)\n    })\n    return\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  printQRs = async (brand, model) => {\n    const date = new Date().toISOString().slice(0,10)\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++) {\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n\n    }\n  }\n\n  pollTxs = async () => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const reqKey = tx[i].reqKey\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey]}, createAPIHost(hosts[0], i.toString()));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          console.log(pollRes)\n          time = time - 10\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n        await this.wait(10000);\n      }\n      //tx successful\n      if (pollRes[reqKey].result.status === \"success\"){\n        console.log('great success', i)\n        tx[i].pollRes = pollRes;\n        // await this.printQRs(qrs, brand, model, keysChain);\n        await this.setState({ txObj: tx })\n      //tx unsuccessful\n      } else {\n        console.log(\"error\", i)\n        console.log(pollRes)\n        //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n        // await this.setState({ loading: false })\n        // alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`)\n        // window.location.reload()\n      }\n    }\n  }\n\n  mkSend = async (pubKey, privKey) => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const pactCode = tx[i].pactCode.join(\" \");\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: pactCode,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n        meta: Pact.lang.mkMeta(\"covid-admin\",i.toString(),0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800),\n        envData: tx[i].envData\n      }, createAPIHost(hosts[0], i.toString()));\n      if (reqKey) {\n        tx[i].reqKey = reqKey.requestKeys[0];\n        console.log(reqKey, i)\n        await this.setState({ txObj: tx });\n      } else {\n        //blockchain call had formatting issues\n        //THIS NEEDS TO BE SMARTER AND HAVE SOME SORT OF LOG\n        await this.setState({ loading: false })\n        alert(`There was a problem processing your transaction on Kadena mainnet on chain ${i}. Your tests were not successfully registered`)\n        window.location.reload();\n      }\n    }\n  }\n\n  formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n    for (let i = 0; i < parseInt(amount); i++) {\n      const tx = this.state.txObj;\n      const keypair = Pact.crypto.genKeyPair();\n      const chainId = keypair.publicKey.replace(/\\D/g,'')[0];\n      const qrData = JSON.stringify({keypair, chainId: chainId});\n      const qr = await this.generateQR(qrData);\n      tx[chainId] = {\n        pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n        keypairs: [...tx[chainId].keypairs, (keypair)],\n        qrs: [...tx[chainId].qrs, qr],\n        envData: {...tx[chainId].envData, [i]: {\"pred\": \"keys-all\", \"keys\": [keypair.publicKey]}},\n        reqKey: \"\",\n        pollRes: [],\n      }\n      await this.setState({ txObj: tx });\n    }\n  }\n\n  registerTests = async (brand, model, amount, pubKey, privKey) => {\n    await this.setState({ loading: true });\n    await this.formatTxObj(brand, model, amount, pubKey, privKey);\n    console.log(this.state.txObj)\n    await this.mkSend(pubKey, privKey);\n    console.log(this.state.txObj)\n    await this.pollTxs();\n    console.log(this.state.txObj)\n  }\n\n  registerTestssss = async (brand, model, amount, pubKey, privKey) => {\n    await this.setState({ loading: true })\n    let pactCode = [];\n    let keysChain = [];\n    let qrs = []\n    let envData = {};\n    for (let i = 0; i < parseInt(amount); i++) {\n      const keypair = Pact.crypto.genKeyPair();\n      //take first digit in public key to be chain id\n      const chainId = keypair.publicKey.replace(/\\D/g,'')[0];\n      const qrData = JSON.stringify({keypair, chainId: chainId})\n      keysChain.push(qrData);\n      const qr = await this.generateQR(qrData);\n      qrs.push(qr)\n      pactCode.push(`(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`)\n      envData[i] = {\"pred\": \"keys-all\", \"keys\": [keypair.publicKey]}\n    }\n    const reqKey = await Pact.fetch.send({\n      networkId: \"testnet04\",\n      pactCode: pactCode.join(\" \"),\n      keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n      meta: Pact.lang.mkMeta(\"covid-admin\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800),\n      envData: envData\n    }, createAPIHost(hosts[0], \"0\"));\n    if (reqKey) {\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        await this.wait(10000);\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], \"0\"));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          console.log(pollRes)\n          time = time - 10\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      //tx successful\n      if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n        console.log('great success')\n        await this.printQRs(qrs, brand, model, keysChain);\n        await this.setState({ loading: false })\n        alert(\"Your test were successfully registered on Kadena mainnet, and QR code labels downloaded\")\n        window.location.reload();\n      //tx unsuccessful\n      } else {\n        console.log(pollRes)\n        await this.setState({ loading: false })\n        alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\")\n        window.location.reload();\n      }\n    } else {\n      //blockchain call had formatting issues\n      await this.setState({ loading: false })\n      alert(\"There was a problem processing your transaction on Kadena mainnet. Your tests were not registered\")\n      window.location.reload();\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          registerTests: this.registerTests\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}