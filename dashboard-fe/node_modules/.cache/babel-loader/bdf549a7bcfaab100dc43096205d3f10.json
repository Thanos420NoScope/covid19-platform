{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode';\n\nconst config = require('../config.json');\n\nconst fs = require('fs');\n\nconst zip = require('jszip')();\n\nimport { saveAs } from \"file-saver\";\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      txObj: {\n        0: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        1: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        2: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        3: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        4: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        5: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        6: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        7: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        8: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        },\n        9: {\n          pactCode: [],\n          keypairs: [],\n          qrs: [],\n          envData: {},\n          reqKey: \"\",\n          pollRes: {}\n        }\n      },\n      txStatus: \"\",\n      successes: 0,\n      total: 0\n    };\n\n    this.setTxStatus = async status => {\n      await this.setState({\n        txStatus: status\n      });\n    };\n\n    this.downloadURI = async (uri, name) => {\n      var link = document.createElement(\"a\");\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.generateQR = async text => {\n      try {\n        const qr = await QRCode.toDataURL(text);\n        return qr;\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.printQRs = async (brand, model) => {\n      const date = new Date().toISOString().slice(0, 10); //do for all 10 chains\n      //i is the chainId\n\n      var folder = zip.folder(`qrs-${brand}-${date}`);\n\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip those without positive result\n\n        if (tx[i].reqKey !== \"\" && tx[i].pollRes.result.status === \"success\") {\n          const qrs = tx[i].qrs;\n          await this.setState({\n            successes: this.state.successes + qrs.length\n          });\n\n          for (let j = 0; j < qrs.length; j++) {\n            folder.file(`${brand}-${model}-${date}-c${i}-${tx[i][\"keypairs\"][j].publicKey.substring(0, 6)}.png`, qrs[j].split('base64,')[1], {\n              base64: true\n            });\n          }\n        }\n      } //download only if qr codes are in the folder\n\n\n      if (Object.keys(folder.files).length > 1) {\n        zip.generateAsync({\n          type: \"blob\"\n        }).then(function (content) {\n          saveAs(content, `qrs-${brand}-${date}.zip`);\n        });\n      }\n    };\n\n    this.pollTxs = async () => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].reqKey === \"\") {\n          continue;\n        }\n\n        const reqKey = tx[i].reqKey; //check kadena tx status every 10 seconds until we get a response (success or fail)\n\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey]\n          }, createAPIHost(hosts[0], i.toString()));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            time = time - 10;\n            await this.wait(10000);\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey].result.status === \"success\") {\n          console.log('great success', i);\n          tx[i].pollRes = pollRes[reqKey]; // await this.printQRs(qrs, brand, model, keysChain);\n\n          await this.setState({\n            txObj: tx\n          }); //tx unsuccessful\n        } else {\n          console.log(\"response error\", i);\n          tx[i].pollRes = pollRes[reqKey];\n          await this.setState({\n            txObj: tx\n          });\n        }\n      }\n    };\n\n    this.mkSend = async (pubKey, privKey) => {\n      //do for all 10 chains\n      //i is the chainId\n      for (let i = 0; i < 10; i++) {\n        const tx = this.state.txObj; //skip chains with no pact code\n\n        if (tx[i].pactCode.length === 0) {\n          continue;\n        }\n\n        const pactCode = tx[i].pactCode.join(\" \");\n\n        try {\n          const reqKey = await Pact.fetch.send({\n            networkId: \"testnet04\",\n            pactCode: pactCode,\n            keyPairs: [{ ...config.covidAdminKeys,\n              clist: {\n                name: \"coin.GAS\",\n                args: []\n              }\n            }, {\n              publicKey: pubKey,\n              secretKey: privKey,\n              clist: {\n                name: \"user.covid.PRINTING-ENTITY\",\n                args: [pubKey]\n              }\n            }],\n            meta: Pact.lang.mkMeta(\"covid-admin\", i.toString(), 0.00000001, 1400000, Math.round(new Date().getTime() / 1000) - 15, 28800),\n            envData: tx[i].envData\n          }, createAPIHost(hosts[0], i.toString()));\n          tx[i].reqKey = reqKey.requestKeys[0];\n          console.log(reqKey, i);\n          await this.setState({\n            txObj: tx\n          });\n        } catch (e) {\n          console.log(\"send failure\", i, e);\n        }\n      }\n    };\n\n    this.formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n      for (let i = 0; i < parseInt(amount); i++) {\n        const tx = this.state.txObj;\n        const keypair = Pact.crypto.genKeyPair();\n        const chainId = keypair.publicKey.replace(/\\D/g, '')[0];\n        const qrData = JSON.stringify({\n          keypair,\n          chainId: chainId\n        });\n        const qr = await this.generateQR(qrData);\n        tx[chainId] = {\n          pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n          keypairs: [...tx[chainId].keypairs, keypair],\n          qrs: [...tx[chainId].qrs, qr],\n          envData: { ...tx[chainId].envData,\n            [i]: {\n              \"pred\": \"keys-all\",\n              \"keys\": [keypair.publicKey]\n            }\n          },\n          reqKey: \"\",\n          pollRes: []\n        };\n        await this.setState({\n          txObj: tx\n        });\n      }\n    };\n\n    this.registerTests = async (brand, model, amount, pubKey, privKey) => {\n      await this.setState({\n        loading: true\n      });\n      await this.setState({\n        total: amount,\n        successes: 0\n      });\n      await this.formatTxObj(brand, model, amount, pubKey, privKey);\n      await this.mkSend(pubKey, privKey);\n      await this.pollTxs();\n      await this.printQRs(brand, model);\n      this.setState({\n        loading: false\n      }); //\n\n      if (this.state.successes === 0) {\n        this.setTxStatus(\"failure\");\n      } else if (this.state.successes === parseInt(amount)) {\n        this.setTxStatus(\"success\");\n      } else {\n        this.setTxStatus(\"partial\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        registerTests: this.registerTests,\n        setTxStatus: this.setTxStatus\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-dashboard/src/contexts/PactContext.js"],"names":["React","Pact","QRCode","config","require","fs","zip","saveAs","Context","createContext","hosts","createAPIHost","network","chainId","PactStore","Component","state","loading","txObj","pactCode","keypairs","qrs","envData","reqKey","pollRes","txStatus","successes","total","setTxStatus","status","setState","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","generateQR","text","qr","toDataURL","err","console","error","wait","timeout","Promise","resolve","setTimeout","printQRs","brand","model","date","Date","toISOString","slice","folder","i","tx","result","length","j","file","publicKey","substring","split","base64","Object","keys","files","generateAsync","type","then","content","pollTxs","time","fetch","poll","requestKeys","toString","log","mkSend","pubKey","privKey","join","send","networkId","keyPairs","covidAdminKeys","clist","args","secretKey","meta","lang","mkMeta","Math","round","getTime","e","formatTxObj","amount","parseInt","keypair","crypto","genKeyPair","replace","qrData","JSON","stringify","registerTests","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAP,EAAZ;;AACA,SAASG,MAAT,QAAuB,YAAvB;AAEA,MAAMC,OAAO,GAAGR,KAAK,CAACS,aAAN,EAAhB;AAGA,MAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAd;;AACA,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAuB,WAAUD,OAAQ,sDAAqDC,OAAQ,OAA5H;;AAEA,OAAO,MAAMC,SAAN,SAAwBd,KAAK,CAACe,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAE7CC,KAF6C,GAErC;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,KAAK,EAAE;AACL,WAAG;AAAEC,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SADE;AAEL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SAFE;AAGL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SAHE;AAIL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SAJE;AAKL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SALE;AAML,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SANE;AAOL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SAPE;AAQL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SARE;AASL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE,SATE;AAUL,WAAG;AAAEL,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,QAAQ,EAAE,EAA1B;AAA8BC,UAAAA,GAAG,EAAE,EAAnC;AAAuCC,UAAAA,OAAO,EAAE,EAAhD;AAAoDC,UAAAA,MAAM,EAAE,EAA5D;AAAgEC,UAAAA,OAAO,EAAE;AAAzE;AAVE,OAFD;AAcNC,MAAAA,QAAQ,EAAE,EAdJ;AAeNC,MAAAA,SAAS,EAAE,CAfL;AAgBNC,MAAAA,KAAK,EAAE;AAhBD,KAFqC;;AAAA,SAqB7CC,WArB6C,GAqB/B,MAAOC,MAAP,IAAkB;AAC9B,YAAM,KAAKC,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAEI;AAAZ,OAAd,CAAN;AACD,KAvB4C;;AAAA,SAyB7CE,WAzB6C,GAyB/B,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACjC,UAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;AACAF,MAAAA,IAAI,CAACG,QAAL,GAAgBJ,IAAhB;AACAC,MAAAA,IAAI,CAACI,IAAL,GAAYN,GAAZ;AACAG,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,IAA1B;AACAA,MAAAA,IAAI,CAACO,KAAL;AACAN,MAAAA,QAAQ,CAACI,IAAT,CAAcG,WAAd,CAA0BR,IAA1B;AACD,KAhC4C;;AAAA,SAkC7CS,UAlC6C,GAkChC,MAAMC,IAAN,IAAc;AACzB,UAAI;AACF,cAAMC,EAAE,GAAG,MAAM3C,MAAM,CAAC4C,SAAP,CAAiBF,IAAjB,CAAjB;AACA,eAAOC,EAAP;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KAzC4C;;AAAA,SAoD7CG,IApD6C,GAoDtC,MAAOC,OAAP,IAAmB;AACxB,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BC,QAAAA,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAV;AACH,OAFM,CAAP;AAGD,KAxD4C;;AAAA,SA2D7CI,QA3D6C,GA2DlC,OAAOC,KAAP,EAAcC,KAAd,KAAwB;AACjC,YAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAb,CADiC,CAEjC;AACA;;AACA,UAAIC,MAAM,GAAGxD,GAAG,CAACwD,MAAJ,CAAY,OAAMN,KAAM,IAAGE,IAAK,EAAhC,CAAb;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAMC,EAAE,GAAG,KAAKhD,KAAL,CAAWE,KAAtB,CAD2B,CAE3B;;AACA,YAAI8C,EAAE,CAACD,CAAD,CAAF,CAAMxC,MAAN,KAAiB,EAAjB,IAAuByC,EAAE,CAACD,CAAD,CAAF,CAAMvC,OAAN,CAAcyC,MAAd,CAAqBpC,MAArB,KAAgC,SAA3D,EAAsE;AACpE,gBAAMR,GAAG,GAAG2C,EAAE,CAACD,CAAD,CAAF,CAAM1C,GAAlB;AACA,gBAAM,KAAKS,QAAL,CAAc;AAAEJ,YAAAA,SAAS,EAAE,KAAKV,KAAL,CAAWU,SAAX,GAAuBL,GAAG,CAAC6C;AAAxC,WAAd,CAAN;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9C,GAAG,CAAC6C,MAAxB,EAAgCC,CAAC,EAAjC,EAAoC;AAClCL,YAAAA,MAAM,CAACM,IAAP,CAAa,GAAEZ,KAAM,IAAGC,KAAM,IAAGC,IAAK,KAAIK,CAAE,IAAGC,EAAE,CAACD,CAAD,CAAF,CAAM,UAAN,EAAkBI,CAAlB,EAAqBE,SAArB,CAA+BC,SAA/B,CAAyC,CAAzC,EAA4C,CAA5C,CAA+C,MAA9F,EAAqGjD,GAAG,CAAC8C,CAAD,CAAH,CAAOI,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAArG,EAAgI;AAACC,cAAAA,MAAM,EAAE;AAAT,aAAhI;AACD;AACF;AACF,OAfgC,CAgBjC;;;AACA,UAAIC,MAAM,CAACC,IAAP,CAAYZ,MAAM,CAACa,KAAnB,EAA0BT,MAA1B,GAAmC,CAAvC,EAA0C;AACxC5D,QAAAA,GAAG,CAACsE,aAAJ,CAAkB;AAACC,UAAAA,IAAI,EAAC;AAAN,SAAlB,EACOC,IADP,CACY,UAASC,OAAT,EAAkB;AACtBxE,UAAAA,MAAM,CAACwE,OAAD,EAAW,OAAMvB,KAAM,IAAGE,IAAK,MAA/B,CAAN;AACP,SAHD;AAID;AACF,KAlF4C;;AAAA,SAoF7CsB,OApF6C,GAoFnC,YAAY;AACpB;AACA;AACA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AAC1B,cAAMC,EAAE,GAAG,KAAKhD,KAAL,CAAWE,KAAtB,CAD0B,CAE1B;;AACA,YAAI8C,EAAE,CAACD,CAAD,CAAF,CAAMxC,MAAN,KAAiB,EAArB,EAAyB;AAAE;AAAU;;AACrC,cAAMA,MAAM,GAAGyC,EAAE,CAACD,CAAD,CAAF,CAAMxC,MAArB,CAJ0B,CAK1B;;AACA,YAAI0D,IAAI,GAAG,GAAX;AACA,YAAIzD,OAAJ;;AACA,eAAOyD,IAAI,GAAG,CAAd,EAAiB;AACfzD,UAAAA,OAAO,GAAG,MAAMvB,IAAI,CAACiF,KAAL,CAAWC,IAAX,CAAgB;AAACC,YAAAA,WAAW,EAAE,CAAC7D,MAAD;AAAd,WAAhB,EAAyCZ,aAAa,CAACD,KAAK,CAAC,CAAD,CAAN,EAAWqD,CAAC,CAACsB,QAAF,EAAX,CAAtD,CAAhB;;AACA,cAAIZ,MAAM,CAACC,IAAP,CAAYlD,OAAZ,EAAqB0C,MAArB,KAAgC,CAApC,EAAuC;AACrClB,YAAAA,OAAO,CAACsC,GAAR,CAAY,gBAAZ;AACAL,YAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACA,kBAAM,KAAK/B,IAAL,CAAU,KAAV,CAAN;AACD,WAJD,MAIO;AACLF,YAAAA,OAAO,CAACsC,GAAR,CAAY9D,OAAZ;AACAyD,YAAAA,IAAI,GAAG,CAAP;AACD;AACF,SAlByB,CAmB1B;;;AACA,YAAIzD,OAAO,CAACD,MAAD,CAAP,CAAgB0C,MAAhB,CAAuBpC,MAAvB,KAAkC,SAAtC,EAAgD;AAC9CmB,UAAAA,OAAO,CAACsC,GAAR,CAAY,eAAZ,EAA6BvB,CAA7B;AACAC,UAAAA,EAAE,CAACD,CAAD,CAAF,CAAMvC,OAAN,GAAgBA,OAAO,CAACD,MAAD,CAAvB,CAF8C,CAG9C;;AACA,gBAAM,KAAKO,QAAL,CAAc;AAAEZ,YAAAA,KAAK,EAAE8C;AAAT,WAAd,CAAN,CAJ8C,CAKhD;AACC,SAND,MAMO;AACLhB,UAAAA,OAAO,CAACsC,GAAR,CAAY,gBAAZ,EAA8BvB,CAA9B;AACAC,UAAAA,EAAE,CAACD,CAAD,CAAF,CAAMvC,OAAN,GAAgBA,OAAO,CAACD,MAAD,CAAvB;AACA,gBAAM,KAAKO,QAAL,CAAc;AAAEZ,YAAAA,KAAK,EAAE8C;AAAT,WAAd,CAAN;AACD;AACF;AACF,KAvH4C;;AAAA,SAyH7CuB,MAzH6C,GAyHpC,OAAOC,MAAP,EAAeC,OAAf,KAA2B;AAClC;AACA;AACA,WAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AAC1B,cAAMC,EAAE,GAAG,KAAKhD,KAAL,CAAWE,KAAtB,CAD0B,CAE1B;;AACA,YAAI8C,EAAE,CAACD,CAAD,CAAF,CAAM5C,QAAN,CAAe+C,MAAf,KAA0B,CAA9B,EAAiC;AAAE;AAAU;;AAC7C,cAAM/C,QAAQ,GAAG6C,EAAE,CAACD,CAAD,CAAF,CAAM5C,QAAN,CAAeuE,IAAf,CAAoB,GAApB,CAAjB;;AACA,YAAI;AACF,gBAAMnE,MAAM,GAAG,MAAMtB,IAAI,CAACiF,KAAL,CAAWS,IAAX,CAAgB;AACnCC,YAAAA,SAAS,EAAE,WADwB;AAEnCzE,YAAAA,QAAQ,EAAEA,QAFyB;AAGnC0E,YAAAA,QAAQ,EAAE,CAAC,EAAC,GAAG1F,MAAM,CAAC2F,cAAX;AAA2BC,cAAAA,KAAK,EAAE;AAAC9D,gBAAAA,IAAI,EAAE,UAAP;AAAmB+D,gBAAAA,IAAI,EAAE;AAAzB;AAAlC,aAAD,EAAkE;AAAC3B,cAAAA,SAAS,EAAEmB,MAAZ;AAAoBS,cAAAA,SAAS,EAAER,OAA/B;AAAwCM,cAAAA,KAAK,EAAE;AAAC9D,gBAAAA,IAAI,EAAE,4BAAP;AAAqC+D,gBAAAA,IAAI,EAAE,CAACR,MAAD;AAA3C;AAA/C,aAAlE,CAHyB;AAInCU,YAAAA,IAAI,EAAEjG,IAAI,CAACkG,IAAL,CAAUC,MAAV,CAAiB,aAAjB,EAA+BrC,CAAC,CAACsB,QAAF,EAA/B,EAA4C,UAA5C,EAAuD,OAAvD,EAAgEgB,IAAI,CAACC,KAAL,CAAY,IAAI3C,IAAJ,EAAD,CAAW4C,OAAX,KAAqB,IAAhC,IAAsC,EAAtG,EAA2G,KAA3G,CAJ6B;AAKnCjF,YAAAA,OAAO,EAAE0C,EAAE,CAACD,CAAD,CAAF,CAAMzC;AALoB,WAAhB,EAMlBX,aAAa,CAACD,KAAK,CAAC,CAAD,CAAN,EAAWqD,CAAC,CAACsB,QAAF,EAAX,CANK,CAArB;AAOArB,UAAAA,EAAE,CAACD,CAAD,CAAF,CAAMxC,MAAN,GAAeA,MAAM,CAAC6D,WAAP,CAAmB,CAAnB,CAAf;AACApC,UAAAA,OAAO,CAACsC,GAAR,CAAY/D,MAAZ,EAAoBwC,CAApB;AACA,gBAAM,KAAKjC,QAAL,CAAc;AAAEZ,YAAAA,KAAK,EAAE8C;AAAT,WAAd,CAAN;AACC,SAXH,CAWI,OAAOwC,CAAP,EAAU;AACVxD,UAAAA,OAAO,CAACsC,GAAR,CAAY,cAAZ,EAA4BvB,CAA5B,EAA+ByC,CAA/B;AACD;AACF;AACF,KAhJ0C;;AAAA,SAkJ7CC,WAlJ6C,GAkJ/B,OAAOjD,KAAP,EAAcC,KAAd,EAAqBiD,MAArB,EAA6BlB,MAA7B,EAAqCC,OAArC,KAAiD;AAC7D,WAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4C,QAAQ,CAACD,MAAD,CAA5B,EAAsC3C,CAAC,EAAvC,EAA2C;AACzC,cAAMC,EAAE,GAAG,KAAKhD,KAAL,CAAWE,KAAtB;AACA,cAAM0F,OAAO,GAAG3G,IAAI,CAAC4G,MAAL,CAAYC,UAAZ,EAAhB;AACA,cAAMjG,OAAO,GAAG+F,OAAO,CAACvC,SAAR,CAAkB0C,OAAlB,CAA0B,KAA1B,EAAgC,EAAhC,EAAoC,CAApC,CAAhB;AACA,cAAMC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACN,UAAAA,OAAD;AAAU/F,UAAAA,OAAO,EAAEA;AAAnB,SAAf,CAAf;AACA,cAAMgC,EAAE,GAAG,MAAM,KAAKF,UAAL,CAAgBqE,MAAhB,CAAjB;AACAhD,QAAAA,EAAE,CAACnD,OAAD,CAAF,GAAc;AACZM,UAAAA,QAAQ,EAAE,CAAC,GAAG6C,EAAE,CAACnD,OAAD,CAAF,CAAYM,QAAhB,EAA2B,6BAA4B8F,IAAI,CAACC,SAAL,CAAe1B,MAAf,CAAuB,IAAGyB,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACvC,SAAvB,CAAkC,IAAG4C,IAAI,CAACC,SAAL,CAAenD,CAAC,CAACsB,QAAF,EAAf,CAA6B,IAAG4B,IAAI,CAACC,SAAL,CAAe1D,KAAf,CAAsB,IAAGyD,IAAI,CAACC,SAAL,CAAezD,KAAf,CAAsB,GAArM,CADE;AAEZrC,UAAAA,QAAQ,EAAE,CAAC,GAAG4C,EAAE,CAACnD,OAAD,CAAF,CAAYO,QAAhB,EAA2BwF,OAA3B,CAFE;AAGZvF,UAAAA,GAAG,EAAE,CAAC,GAAG2C,EAAE,CAACnD,OAAD,CAAF,CAAYQ,GAAhB,EAAqBwB,EAArB,CAHO;AAIZvB,UAAAA,OAAO,EAAE,EAAC,GAAG0C,EAAE,CAACnD,OAAD,CAAF,CAAYS,OAAhB;AAAyB,aAACyC,CAAD,GAAK;AAAC,sBAAQ,UAAT;AAAqB,sBAAQ,CAAC6C,OAAO,CAACvC,SAAT;AAA7B;AAA9B,WAJG;AAKZ9C,UAAAA,MAAM,EAAE,EALI;AAMZC,UAAAA,OAAO,EAAE;AANG,SAAd;AAQA,cAAM,KAAKM,QAAL,CAAc;AAAEZ,UAAAA,KAAK,EAAE8C;AAAT,SAAd,CAAN;AACD;AACF,KAnK4C;;AAAA,SAqK7CmD,aArK6C,GAqK7B,OAAO3D,KAAP,EAAcC,KAAd,EAAqBiD,MAArB,EAA6BlB,MAA7B,EAAqCC,OAArC,KAAiD;AAC/D,YAAM,KAAK3D,QAAL,CAAc;AAAEb,QAAAA,OAAO,EAAE;AAAX,OAAd,CAAN;AACA,YAAM,KAAKa,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE+E,MAAT;AAAiBhF,QAAAA,SAAS,EAAE;AAA5B,OAAd,CAAN;AACA,YAAM,KAAK+E,WAAL,CAAiBjD,KAAjB,EAAwBC,KAAxB,EAA+BiD,MAA/B,EAAuClB,MAAvC,EAA+CC,OAA/C,CAAN;AACA,YAAM,KAAKF,MAAL,CAAYC,MAAZ,EAAoBC,OAApB,CAAN;AACA,YAAM,KAAKT,OAAL,EAAN;AACA,YAAM,KAAKzB,QAAL,CAAcC,KAAd,EAAqBC,KAArB,CAAN;AACA,WAAK3B,QAAL,CAAc;AAAEb,QAAAA,OAAO,EAAE;AAAX,OAAd,EAP+D,CAQ/D;;AACA,UAAI,KAAKD,KAAL,CAAWU,SAAX,KAAyB,CAA7B,EAA+B;AAC7B,aAAKE,WAAL,CAAiB,SAAjB;AACD,OAFD,MAGK,IAAI,KAAKZ,KAAL,CAAWU,SAAX,KAAyBiF,QAAQ,CAACD,MAAD,CAArC,EAA8C;AACjD,aAAK9E,WAAL,CAAiB,SAAjB;AACD,OAFI,MAEE;AACL,aAAKA,WAAL,CAAiB,SAAjB;AACD;AACF,KAtL4C;AAAA;;AAwL7CwF,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,OAAD,CAAS,QAAT;AACE,MAAA,KAAK,EAAE,EACL,GAAG,KAAKpG,KADH;AAELmG,QAAAA,aAAa,EAAE,KAAKA,aAFf;AAGLvF,QAAAA,WAAW,EAAE,KAAKA;AAHb,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKyF,KAAL,CAAWC,QAPd,CADF;AAWD;;AApM4C;AAwM/C,eAAe9G,OAAf","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport QRCode from 'qrcode'\nconst config = require('../config.json')\nconst fs = require('fs')\nconst zip = require('jszip')()\nimport { saveAs } from \"file-saver\";\n\nconst Context = React.createContext();\n\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false,\n    txObj: {\n      0: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      1: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      2: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      3: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      4: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      5: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      6: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      7: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      8: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} },\n      9: { pactCode: [], keypairs: [], qrs: [], envData: {}, reqKey: \"\", pollRes: {} }\n    },\n    txStatus: \"\",\n    successes: 0,\n    total: 0\n  }\n\n  setTxStatus = async (status) => {\n    await this.setState({ txStatus: status })\n  }\n\n  downloadURI = async (uri, name) => {\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  generateQR = async text => {\n    try {\n      const qr = await QRCode.toDataURL(text)\n      return qr\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  // printQRss = async (qrs, brand, model, keysChainArr) => {\n  //   const date = new Date().toISOString().slice(0,10)\n  //   await qrs.map(async (qr, i) => {\n  //     const keysChain = JSON.parse(keysChainArr[i])\n  //     await this.downloadURI(qr, `${brand}-${model}-${date}-c${keysChain.chainId}-${keysChain.keypair.publicKey.substring(0, 6)}.png`)\n  //   })\n  //   return\n  // }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n\n  printQRs = async (brand, model) => {\n    const date = new Date().toISOString().slice(0,10)\n    //do for all 10 chains\n    //i is the chainId\n    var folder = zip.folder(`qrs-${brand}-${date}`);\n    for (let i = 0; i < 10; i++) {\n      const tx = this.state.txObj;\n      //skip those without positive result\n      if (tx[i].reqKey !== \"\" && tx[i].pollRes.result.status === \"success\") {\n        const qrs = tx[i].qrs;\n        await this.setState({ successes: this.state.successes + qrs.length })\n        for (let j = 0; j < qrs.length; j++){\n          folder.file(`${brand}-${model}-${date}-c${i}-${tx[i][\"keypairs\"][j].publicKey.substring(0, 6)}.png`, qrs[j].split('base64,')[1],{base64: true})\n        }\n      }\n    }\n    //download only if qr codes are in the folder\n    if (Object.keys(folder.files).length > 1) {\n      zip.generateAsync({type:\"blob\"})\n            .then(function(content) {\n              saveAs(content, `qrs-${brand}-${date}.zip`);\n      });\n    }\n  }\n\n  pollTxs = async () => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].reqKey === \"\") { continue }\n      const reqKey = tx[i].reqKey\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey]}, createAPIHost(hosts[0], i.toString()));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          time = time - 10\n          await this.wait(10000);\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      //tx successful\n      if (pollRes[reqKey].result.status === \"success\"){\n        console.log('great success', i)\n        tx[i].pollRes = pollRes[reqKey];\n        // await this.printQRs(qrs, brand, model, keysChain);\n        await this.setState({ txObj: tx })\n      //tx unsuccessful\n      } else {\n        console.log(\"response error\", i)\n        tx[i].pollRes = pollRes[reqKey];\n        await this.setState({ txObj: tx })\n      }\n    }\n  }\n\n  mkSend = async (pubKey, privKey) => {\n    //do for all 10 chains\n    //i is the chainId\n    for (let i = 0; i < 10; i++){\n      const tx = this.state.txObj;\n      //skip chains with no pact code\n      if (tx[i].pactCode.length === 0) { continue }\n      const pactCode = tx[i].pactCode.join(\" \");\n      try {\n        const reqKey = await Pact.fetch.send({\n          networkId: \"testnet04\",\n          pactCode: pactCode,\n          keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {publicKey: pubKey, secretKey: privKey, clist: {name: \"user.covid.PRINTING-ENTITY\", args: [pubKey]}}],\n          meta: Pact.lang.mkMeta(\"covid-admin\",i.toString(),0.00000001,1400000,(Math.round((new Date).getTime()/1000)-15), 28800),\n          envData: tx[i].envData\n        }, createAPIHost(hosts[0], i.toString()));\n        tx[i].reqKey = reqKey.requestKeys[0];\n        console.log(reqKey, i)\n        await this.setState({ txObj: tx });\n        } catch (e) {\n          console.log(\"send failure\", i, e)\n        }\n      }\n    }\n\n  formatTxObj = async (brand, model, amount, pubKey, privKey) => {\n    for (let i = 0; i < parseInt(amount); i++) {\n      const tx = this.state.txObj;\n      const keypair = Pact.crypto.genKeyPair();\n      const chainId = keypair.publicKey.replace(/\\D/g,'')[0];\n      const qrData = JSON.stringify({keypair, chainId: chainId});\n      const qr = await this.generateQR(qrData);\n      tx[chainId] = {\n        pactCode: [...tx[chainId].pactCode, `(user.covid.register-test ${JSON.stringify(pubKey)} ${JSON.stringify(keypair.publicKey)} ${JSON.stringify(i.toString())} ${JSON.stringify(brand)} ${JSON.stringify(model)})`],\n        keypairs: [...tx[chainId].keypairs, (keypair)],\n        qrs: [...tx[chainId].qrs, qr],\n        envData: {...tx[chainId].envData, [i]: {\"pred\": \"keys-all\", \"keys\": [keypair.publicKey]}},\n        reqKey: \"\",\n        pollRes: [],\n      }\n      await this.setState({ txObj: tx });\n    }\n  }\n\n  registerTests = async (brand, model, amount, pubKey, privKey) => {\n    await this.setState({ loading: true })\n    await this.setState({ total: amount, successes: 0 });\n    await this.formatTxObj(brand, model, amount, pubKey, privKey);\n    await this.mkSend(pubKey, privKey);\n    await this.pollTxs();\n    await this.printQRs(brand, model)\n    this.setState({ loading: false });\n    //\n    if (this.state.successes === 0){\n      this.setTxStatus(\"failure\");\n    }\n    else if (this.state.successes === parseInt(amount)){\n      this.setTxStatus(\"success\");\n    } else {\n      this.setTxStatus(\"partial\");\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          registerTests: this.registerTests,\n          setTxStatus: this.setTxStatus\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}