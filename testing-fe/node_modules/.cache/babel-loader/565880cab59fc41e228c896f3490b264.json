{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport uuid from 'react-uuid';\n\nvar hash = require('object-hash');\n\nconst keys = require('../config.json');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nconst dumKeyPair = Pact.crypto.genKeyPair();\nconst pos = {\n  lat: \"\",\n  long: \"\"\n};\n\nfunction showPosition(position) {\n  console.log(position.coords.latitude, position.coords.longitude);\n  pos.lat = position.coords.latitude;\n  pos.long = position.coords.longitude;\n}\n\nconst loc = navigator.geolocation.getCurrentPosition(showPosition);\nexport class PactStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      lat: \"\",\n      long: \"\"\n    };\n\n    this.writeImg = async (imgBlob, serial) => {\n      await fetch(\"https://api.rapidcovid19.rymedi.com/images\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          img: imgBlob,\n          serial: serial\n        })\n      });\n    };\n\n    this.getRecord = async serial => {\n      const res = await fetch(`https://api.rapidcovid19.rymedi.com/records/serial/${serial}`);\n      const json = await res.json();\n      return json;\n    };\n\n    this.initTest = async (age, sex, serial, docKP, docUuid) => {\n      this.setState({\n        loading: true\n      });\n      const testUuid = uuid();\n      const json = `{uuid: ${testUuid}, age_group: ${age}, gender: ${sex}, init_by: ${docUuid}, serial: ${serial}, latitude: ${pos.lat}, longitude: ${pos.long}}`;\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.rymedi-covid.init-record ${JSON.stringify(hash(json))} ${JSON.stringify(serial)} ${JSON.stringify(docUuid)})`,\n        keyPairs: [{ ...keys.rymediKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, { ...docKP,\n          clist: {\n            name: \"user.rymedi-covid.DOCTOR\",\n            args: [docUuid]\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"rymedi\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        console.log(reqKey); // this.setState({loading: false})\n\n        await fetch(\"https://api.rapidcovid19.rymedi.com/records\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            uuid: testUuid,\n            age_group: age,\n            gender: sex,\n            json: json,\n            init_by: docUuid,\n            serial: serial,\n            latitude: pos.lat,\n            longitude: pos.long,\n            kuuid_init: reqKey.requestKeys[0]\n          })\n        });\n      }\n\n      await this.setState({\n        loading: false\n      });\n      window.location.reload();\n    };\n\n    this.endTest = async (serial, imgHash, res, docKP, docUuid, imgBlob) => {\n      this.setState({\n        loading: true\n      }); //fetch the old data to append to it\n\n      const json = await this.getRecord(serial);\n\n      if (json.message) {\n        alert(\"this serial number does not exist in our records\");\n        window.location.reload();\n      }\n\n      const newJson = `{age_group: ${json.age_group}, gender: ${json.gender}, result: ${res}, init_by: ${json.init_by}, end_by: ${docUuid}, serial: ${json.serial}, uuid: ${json.uuid}, longitude: ${pos.long}, latitude: ${pos.lat}, kuuid_init: ${json.kuuid_init}}`;\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.rymedi-covid.end-record ${JSON.stringify(serial)} ${JSON.stringify(docUuid)} ${JSON.stringify(imgHash)} ${JSON.stringify(hash(newJson))})`,\n        keyPairs: [{ ...keys.rymediKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, { ...docKP,\n          clist: {\n            name: \"user.rymedi-covid.DOCTOR\",\n            args: [docUuid]\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"rymedi\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        console.log(reqKey);\n        await fetch(`https://api.rapidcovid19.rymedi.com/records/${serial}`, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"PUT\",\n          body: JSON.stringify({\n            result: res,\n            end_by: docUuid,\n            img_hash: imgHash,\n            json: newJson,\n            latitude: pos.lat,\n            longitude: pos.long,\n            kuuid_end: reqKey.requestKeys[0]\n          })\n        }); // console.log(btoa(imgBlob))\n        //need to store the image properly!!\n\n        await this.writeImg(btoa(imgBlob), serial);\n      }\n\n      await this.setState({\n        loading: false\n      });\n      window.location.reload();\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        getDoctor: this.getDoctor,\n        initTest: this.initTest,\n        endTest: this.endTest,\n        writeImg: this.writeImg,\n        getRecord: this.getRecord\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactContext.js"],"names":["React","Pact","uuid","hash","require","keys","Context","createContext","hosts","createAPIHost","network","chainId","dumKeyPair","crypto","genKeyPair","pos","lat","long","showPosition","position","console","log","coords","latitude","longitude","loc","navigator","geolocation","getCurrentPosition","PactStore","Component","state","loading","writeImg","imgBlob","serial","fetch","headers","method","body","JSON","stringify","img","getRecord","res","json","initTest","age","sex","docKP","docUuid","setState","testUuid","reqKey","send","networkId","pactCode","keyPairs","rymediKeys","clist","name","args","meta","lang","mkMeta","Math","round","Date","getTime","age_group","gender","init_by","kuuid_init","requestKeys","window","location","reload","endTest","imgHash","message","alert","newJson","result","end_by","img_hash","kuuid_end","btoa","render","getDoctor","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport uuid from 'react-uuid'\nvar hash = require('object-hash');\nconst keys = require('../config.json')\n\nconst Context = React.createContext();\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\nconst dumKeyPair = Pact.crypto.genKeyPair();\n\nconst pos = {lat: \"\", long: \"\"}\nfunction showPosition(position) {\n  console.log(position.coords.latitude, position.coords.longitude)\n  pos.lat = position.coords.latitude;\n  pos.long = position.coords.longitude;\n}\nconst loc = navigator.geolocation.getCurrentPosition(showPosition);\n\nexport class PactStore extends React.Component {\n\n  state = {\n    loading: false,\n    lat: \"\",\n    long: \"\"\n  }\n\n  writeImg = async (imgBlob, serial) => {\n    await fetch(\"https://api.rapidcovid19.rymedi.com/images\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        img: imgBlob,\n        serial: serial\n      })\n    })\n  }\n\n  getRecord = async (serial) => {\n    const res = await fetch(`https://api.rapidcovid19.rymedi.com/records/serial/${serial}`);\n    const json = await res.json();\n    return json\n  }\n\n  initTest = async (age, sex, serial, docKP, docUuid) => {\n    this.setState({loading: true})\n    const testUuid = uuid();\n    const json = `{uuid: ${testUuid}, age_group: ${age}, gender: ${sex}, init_by: ${docUuid}, serial: ${serial}, latitude: ${pos.lat}, longitude: ${pos.long}}`\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.rymedi-covid.init-record ${JSON.stringify(hash(json))} ${JSON.stringify(serial)} ${JSON.stringify(docUuid)})`,\n        keyPairs: [{...keys.rymediKeys, clist: {name: \"coin.GAS\", args: []}}, {...docKP, clist: {name: \"user.rymedi-covid.DOCTOR\", args: [docUuid]}}],\n        meta: Pact.lang.mkMeta(\"rymedi\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], \"0\"))\n      if (reqKey) {\n        console.log(reqKey);\n        // this.setState({loading: false})\n        await fetch(\"https://api.rapidcovid19.rymedi.com/records\", {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n          \tuuid: testUuid,\n          \tage_group: age,\n          \tgender: sex,\n          \tjson: json,\n          \tinit_by: docUuid,\n          \tserial: serial,\n          \tlatitude: pos.lat,\n          \tlongitude: pos.long,\n          \tkuuid_init: reqKey.requestKeys[0]\n          })\n        })\n      }\n      await this.setState({loading: false})\n      window.location.reload();\n  }\n\n  endTest = async (serial, imgHash, res, docKP, docUuid, imgBlob) => {\n    this.setState({loading: true})\n    //fetch the old data to append to it\n    const json = await this.getRecord(serial)\n    if (json.message) {\n      alert(\"this serial number does not exist in our records\");\n      window.location.reload();\n    }\n    const newJson = `{age_group: ${json.age_group}, gender: ${json.gender}, result: ${res}, init_by: ${json.init_by}, end_by: ${docUuid}, serial: ${json.serial}, uuid: ${json.uuid}, longitude: ${pos.long}, latitude: ${pos.lat}, kuuid_init: ${json.kuuid_init}}`\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.rymedi-covid.end-record ${JSON.stringify(serial)} ${JSON.stringify(docUuid)} ${JSON.stringify(imgHash)} ${JSON.stringify(hash(newJson))})`,\n        keyPairs: [{...keys.rymediKeys, clist: {name: \"coin.GAS\", args: []}}, {...docKP, clist: {name: \"user.rymedi-covid.DOCTOR\", args: [docUuid]}}],\n        meta: Pact.lang.mkMeta(\"rymedi\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], \"0\"))\n      if (reqKey) {\n        console.log(reqKey);\n        await fetch(`https://api.rapidcovid19.rymedi.com/records/${serial}`, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"PUT\",\n          body: JSON.stringify({\n            result: res,\n            end_by: docUuid,\n            img_hash: imgHash,\n            json: newJson,\n            latitude: pos.lat,\n            longitude: pos.long,\n            kuuid_end: reqKey.requestKeys[0]\n          })\n        })\n        // console.log(btoa(imgBlob))\n        //need to store the image properly!!\n        await this.writeImg(btoa(imgBlob), serial)\n      }\n      await this.setState({loading: false})\n      window.location.reload();\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          getDoctor: this.getDoctor,\n          initTest: this.initTest,\n          endTest: this.endTest,\n          writeImg: this.writeImg,\n          getRecord: this.getRecord\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}