{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRScan.js\";\nimport React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactCallContext from '../contexts/PactCallContext';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader';\n\nconst QRScan = () => {\n  const pcContext = useContext(PactCallContext);\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [testJSON, setTestJSON] = useState(\"\");\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async pubKey => {\n    setLoading(true);\n    const res = await pcContext.getTest(pubKey);\n\n    if (res === \"failure\") {\n      //this public key was never registered on chain\n      setScanType('not registered on the blockchain');\n    } else {\n      if (res[\"test-init-bh\"][\"int\"] === 0) {\n        //test is registered and not used yet -> SHOW INIT TEST\n        setScanType('init');\n      }\n\n      if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-init-bh\"][\"int\"] === 0) {\n        //test is registered and administered -> SHOW END TEST\n        setScanType('end');\n      }\n\n      if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-init-bh\"][\"int\"] !== 0) {\n        //test has already been used\n        setScanType('already used');\n      }\n    }\n\n    setLoading(false);\n  };\n\n  const errorComponent = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"red\",\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Invalid Test!\"), `Please report immediately. This test is compromised as it was ${scanType}`));\n  };\n\n  const handleQRScan = data => {\n    if (data) {\n      data = JSON.parse(data);\n\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setTestJSON(data);\n        setshowQR(false);\n        getInfo(data.keypair.publicKey);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly');\n      }\n    }\n  };\n\n  const handleQRError = err => {\n    console.error(err);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, loading ? React.createElement(Loader, {\n    active: true,\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }) : scanType === \"\" ? showQR ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    onError: handleQRError,\n    onScan: handleQRScan,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 160,\n      marginTop: 5\n    },\n    onClick: () => setshowQR(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Close and Type\")) : React.createElement(Form.Field, {\n    style: {\n      width: \"240px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\",\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#18A33C\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Test Public Key\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Test Public Key\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Scan QR code on test or enter number manually\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"key\",\n    iconPosition: \"left\",\n    placeholder: \"Public Key\",\n    value: pubKey,\n    onChange: e => setPubKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"key\",\n    iconPosition: \"left\",\n    placeholder: \"Secret Key\",\n    value: secretKey,\n    onChange: e => setSecretKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"key\",\n    iconPosition: \"left\",\n    placeholder: \"Chain ID\",\n    value: chainId,\n    onChange: e => setChainId(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 240,\n      marginTop: 5\n    },\n    onClick: async () => await getInfo(pubKey),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Submit\")) : scanType === 'init' ? React.createElement(InitRecord, {\n    pubKey: pubKey,\n    data: testJSON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }) : scanType === 'end' ? React.createElement(EndRecord, {\n    pubKey: pubKey,\n    data: testJSON,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }) : errorComponent());\n};\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRScan.js"],"names":["React","useState","useEffect","useContext","Fragment","useRef","Button","Grid","Input","Icon","Form","List","Label","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","PactCallContext","InitRecord","EndRecord","QrReader","QRScan","pcContext","showQR","setshowQR","pubKey","setPubKey","loading","setLoading","testJSON","setTestJSON","scanType","setScanType","getInfo","res","getTest","errorComponent","marginBottom","handleQRScan","data","JSON","parse","keypair","chainId","publicKey","handleQRError","err","console","error","marginTop","backgroundColor","color","width","margin","fontWeight","e","target","value","secretKey","setSecretKey","setChainId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactCallContext from '../contexts/PactCallContext'\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader'\n\n\nconst QRScan = () => {\n\n  const pcContext = useContext(PactCallContext);\n\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [testJSON, setTestJSON] = useState(\"\");\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async (pubKey) => {\n    setLoading(true)\n    const res = await pcContext.getTest(pubKey);\n    if (res === \"failure\") {\n      //this public key was never registered on chain\n      setScanType('not registered on the blockchain')\n    } else {\n      if (res[\"test-init-bh\"][\"int\"] === 0){\n        //test is registered and not used yet -> SHOW INIT TEST\n        setScanType('init')\n      } if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-init-bh\"][\"int\"] === 0) {\n        //test is registered and administered -> SHOW END TEST\n        setScanType('end')\n      } if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-init-bh\"][\"int\"] !== 0) {\n        //test has already been used\n        setScanType('already used')\n      }\n    }\n    setLoading(false);\n  }\n\n  const errorComponent = () => {\n    return (\n      <div>\n        <Message color='red' style={{marginBottom: 20}}>\n          <Message.Header>\n            Invalid Test!\n          </Message.Header>\n            {`Please report immediately. This test is compromised as it was ${scanType}`}\n        </Message>\n      </div>\n    );\n  }\n\n  const handleQRScan = data => {\n    if (data) {\n      data = JSON.parse(data);\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setTestJSON(data)\n        setshowQR(false);\n        getInfo(data.keypair.publicKey);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly')\n      }\n    }\n\n  }\n\n  const handleQRError = err => {\n    console.error(err)\n  }\n\n  return (\n    <div style={{marginTop: 20}}>\n    {(loading ? <Loader active inline /> :\n      (scanType === \"\" ?\n        (showQR ?\n              <div>\n                <QrReader\n                  onError={handleQRError}\n                  onScan={handleQRScan}\n                />\n                <Button\n                    style={{\n                      backgroundColor: \"#18A33C\",\n                      color: \"white\",\n                      width: 160,\n                      marginTop: 5\n                      }}\n                    onClick={() => setshowQR(false)}\n                  >\n                  Close and Type\n                </Button>\n              </div>\n              :\n              <Form.Field  style={{width:\"240px\", margin: \"0 auto\", marginTop: \"10px\", marginBottom: 0}} >\n                <label style={{color: \"#18A33C\", fontWeight: 'bold', marginBottom: 20}}>Test Public Key\n                  <Popup\n                    trigger={\n                      <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                    }\n                    position='top center'\n                  >\n                    <Popup.Header>Test Public Key</Popup.Header>\n                    <Popup.Content>Scan QR code on test or enter number manually</Popup.Content>\n                  </Popup>\n                </label>\n                <div>\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='key'\n                    iconPosition='left'\n                    placeholder='Public Key'\n                    value={pubKey}\n                    onChange={(e) => setPubKey(e.target.value)}\n                  />\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='key'\n                    iconPosition='left'\n                    placeholder='Secret Key'\n                    value={secretKey}\n                    onChange={(e) => setSecretKey(e.target.value)}\n                  />\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='key'\n                    iconPosition='left'\n                    placeholder='Chain ID'\n                    value={chainId}\n                    onChange={(e) => setChainId(e.target.value)}\n                  />\n                </div>\n                <Button\n                    style={{\n                      backgroundColor: \"#18A33C\",\n                      color: \"white\",\n                      width: 240,\n                      marginTop: 5\n                      }}\n                    onClick={async () => await getInfo(pubKey)}\n\n                  >\n                  Submit\n                </Button>\n              </Form.Field>\n            ) : (scanType === 'init' ? <InitRecord pubKey={pubKey} data={testJSON}/> : (scanType === 'end' ? <EndRecord pubKey={pubKey} data={testJSON}/> : errorComponent())))\n    )}\n\n    </div>\n  )\n\n}\n\nexport default QRScan;\n"]},"metadata":{},"sourceType":"module"}