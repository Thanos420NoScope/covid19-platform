{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\n\nvar hash = require('object-hash');\n\nconst config = require('../config.json');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactCallStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testInfo: {},\n      txData: {},\n      loading: false,\n      txStatus: \"\",\n      screen: \"welcome\"\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.setScreen = async name => {\n      await this.setState({\n        screen: name\n      });\n    };\n\n    this.getTest = async (pubKey, chainId) => {\n      await this.setState({\n        loading: true\n      });\n      const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"dummy-local\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (res.result.status === \"success\") {\n        await this.setState({\n          testInfo: res.result.data\n        });\n        await this.setState({\n          loading: false\n        });\n        return res.result.data;\n      } else {\n        await this.setState({\n          testInfo: \"failure\"\n        });\n        await this.setState({\n          loading: false\n        });\n        return \"failure\";\n      }\n    };\n\n    this.administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id, zip, country) => {\n      await this.setState({\n        loading: true\n      });\n      const patientJSON = {\n        name: name,\n        surname: surname,\n        dob: dob,\n        id: id\n      };\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(country)} ${JSON.stringify(zip)} ${JSON.stringify(hash(patientJSON))})\\n(+ 1 2)`,\n        keyPairs: [{\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: [{\n            name: \"user.covid.REGISTERED-TEST\",\n            args: [pubKey]\n          }, {\n            name: `user.covid-gas-station.GAS_PAYER`,\n            args: [\"hi\", {\n              int: 1\n            }, 1.0]\n          }]\n        }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], chainId));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          //doc registered on blockchain, now add to db\n          await this.setState({\n            loading: false,\n            txStatus: 'success',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); // alert(\"The test was successfuly registered on Kadena mainnet\")\n          //SHOW A MESSAGE OF SUCCESS\n          // window.location.reload();\n          //tx unsuccessful\n        } else {\n          await this.setState({\n            loading: false,\n            txStatus: 'failure',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n          // window.location.reload();\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false,\n          txStatus: 'failure',\n          txData: pollRes[reqKey.requestKeys[0]]\n        }); // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n        // window.location.reload();\n      }\n    };\n\n    this.endTest = async (pubKey, privKey, chainId, result) => {\n      await this.setState({\n        loading: true\n      });\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.covid.end-test ${JSON.stringify(pubKey)} ${JSON.stringify(result)})`,\n        keyPairs: [{\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: [{\n            name: \"user.covid.REGISTERED-TEST\",\n            args: [pubKey]\n          }, {\n            name: `user.covid-gas-station.GAS_PAYER`,\n            args: [\"hi\", {\n              int: 1\n            }, 1.0]\n          }]\n        }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], chainId));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          //doc registered on blockchain, now add to db\n          await this.setState({\n            loading: false,\n            txStatus: 'success',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); //tx unsuccessful\n        } else {\n          await this.setState({\n            loading: false,\n            txStatus: 'failure',\n            txData: pollRes[reqKey.requestKeys[0]]\n          });\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false,\n          txStatus: 'failure',\n          txData: pollRes[reqKey.requestKeys[0]]\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        getTest: this.getTest,\n        administerTest: this.administerTest,\n        endTest: this.endTest,\n        setScreen: this.setScreen\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js"],"names":["React","Pact","hash","require","config","Context","createContext","hosts","createAPIHost","network","chainId","PactCallStore","Component","state","testInfo","txData","loading","txStatus","screen","wait","timeout","Promise","resolve","setTimeout","setScreen","name","setState","getTest","pubKey","res","fetch","local","networkId","pactCode","JSON","stringify","keyPairs","covidAdminKeys","clist","args","meta","lang","mkMeta","Math","round","Date","getTime","result","status","data","administerTest","privKey","ageGroup","gender","surname","dob","id","zip","country","patientJSON","reqKey","send","publicKey","secretKey","int","time","pollRes","poll","requestKeys","Object","keys","length","console","log","endTest","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nvar hash = require('object-hash');\nconst config = require('../config.json')\n\nconst Context = React.createContext();\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactCallStore extends React.Component {\n\n  state = {\n    testInfo: {},\n    txData: {},\n    loading: false,\n    txStatus: \"\",\n    screen: \"welcome\"\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  setScreen = async (name) => {\n    await this.setState({ screen: name });\n  }\n\n  getTest = async (pubKey, chainId) => {\n    await this.setState({ loading: true })\n    const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}],\n        meta: Pact.lang.mkMeta(\"dummy-local\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId))\n    if (res.result.status === \"success\") {\n      await this.setState({ testInfo: res.result.data })\n      await this.setState({ loading: false })\n      return res.result.data;\n    } else {\n      await this.setState({ testInfo: \"failure\" })\n      await this.setState({ loading: false })\n      return \"failure\"\n    }\n  }\n\n  administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id, zip, country) => {\n    await this.setState({ loading: true })\n    const patientJSON = {\n      name: name,\n      surname: surname,\n      dob: dob,\n      id: id\n    }\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(country)} ${JSON.stringify(zip)} ${JSON.stringify(hash(patientJSON))})\\n(+ 1 2)`,\n        keyPairs: [\n          {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: [\n              {\n                name: \"user.covid.REGISTERED-TEST\",\n                args: [pubKey]\n              },\n              {\n                name: `user.covid-gas-station.GAS_PAYER`,\n                args: [\"hi\", {int: 1}, 1.0]\n              }\n            ]\n          }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId));\n        if (reqKey) {\n          //check kadena tx status every 10 seconds until we get a response (success or fail)\n          var time = 180;\n          var pollRes;\n          while (time > 0) {\n            await this.wait(10000);\n            pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], chainId));\n            if (Object.keys(pollRes).length === 0) {\n              console.log('no return poll');\n              console.log(pollRes)\n              time = time - 10\n            } else {\n              console.log(pollRes);\n              time = 0;\n            }\n          }\n          //tx successful\n          if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n            //doc registered on blockchain, now add to db\n            await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n            // alert(\"The test was successfuly registered on Kadena mainnet\")\n            //SHOW A MESSAGE OF SUCCESS\n            // window.location.reload();\n          //tx unsuccessful\n          } else {\n            await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n            // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n            // window.location.reload();\n          }\n        } else {\n          //blockchain call had formatting issues\n          await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n          // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n          // window.location.reload();\n        }\n  }\n\n  endTest = async (pubKey, privKey, chainId, result) => {\n    await this.setState({ loading: true })\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.covid.end-test ${JSON.stringify(pubKey)} ${JSON.stringify(result)})`,\n        keyPairs: [\n          {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: [\n              {\n                name: \"user.covid.REGISTERED-TEST\",\n                args: [pubKey]\n              },\n              {\n                name: `user.covid-gas-station.GAS_PAYER`,\n                args: [\"hi\", {int: 1}, 1.0]\n              }\n            ]\n          }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId));\n        if (reqKey) {\n          //check kadena tx status every 10 seconds until we get a response (success or fail)\n          var time = 180;\n          var pollRes;\n          while (time > 0) {\n            await this.wait(10000);\n            pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], chainId));\n            if (Object.keys(pollRes).length === 0) {\n              console.log('no return poll');\n              console.log(pollRes)\n              time = time - 10\n            } else {\n              console.log(pollRes);\n              time = 0;\n            }\n          }\n          //tx successful\n          if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n            //doc registered on blockchain, now add to db\n            await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n          //tx unsuccessful\n          } else {\n            await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n          }\n        } else {\n          //blockchain call had formatting issues\n          await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n        }\n  }\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          getTest: this.getTest,\n          administerTest: this.administerTest,\n          endTest: this.endTest,\n          setScreen: this.setScreen\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}