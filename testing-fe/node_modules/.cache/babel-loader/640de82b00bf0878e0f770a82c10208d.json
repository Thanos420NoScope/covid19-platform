{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/components/QRScan.js\";\nimport React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader } from 'semantic-ui-react';\nimport QrReader from 'react-qr-reader';\n\nconst QRScan = () => {\n  const [showQR, setshowQR] = useState(true);\n  const [serial, setSerial] = useState(\"\");\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, showQR ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    onError: e => console.log(e),\n    onScan: data => {\n      if (data) {\n        setSerial(data);\n        setshowQR(false);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 160,\n      marginTop: 5\n    },\n    onClick: () => setshowQR(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Close and Type\")) : React.createElement(Form.Field, {\n    style: {\n      width: \"240px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\",\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#18A33C\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Test Serial Number\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Test Serial Number\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Scan QR code on test or enter number manually\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"hashtag\",\n    iconPosition: \"left\",\n    placeholder: \"Serial Number\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 160,\n      marginTop: 5\n    },\n    onClick: () => setshowQR(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/components/QRScan.js"],"names":["React","useState","useEffect","useContext","Fragment","useRef","Button","Grid","Input","Icon","Form","List","Label","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","QrReader","QRScan","showQR","setshowQR","serial","setSerial","marginTop","e","console","log","data","backgroundColor","color","width","margin","marginBottom","fontWeight","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader } from 'semantic-ui-react';\nimport QrReader from 'react-qr-reader'\n\nconst QRScan = () => {\n\n  const [showQR, setshowQR] = useState(true);\n  const [serial, setSerial] = useState(\"\");\n\n  return (\n    <div style={{marginTop: 20}}>\n      {showQR ?\n        <div>\n          <QrReader\n            onError={(e) => console.log(e)}\n            onScan={(data) => {\n              if (data) {\n                setSerial(data);\n                setshowQR(false);\n              }\n            }}\n          />\n          <Button\n              style={{\n                backgroundColor: \"#18A33C\",\n                color: \"white\",\n                width: 160,\n                marginTop: 5\n                }}\n              onClick={() => setshowQR(false)}\n            >\n            Close and Type\n          </Button>\n        </div>\n        :\n        <Form.Field  style={{width:\"240px\", margin: \"0 auto\", marginTop: \"10px\", marginBottom: 0}} >\n          <label style={{color: \"#18A33C\", fontWeight: 'bold', marginBottom: 20}}>Test Serial Number\n            <Popup\n              trigger={\n                <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n              }\n              position='top center'\n            >\n              <Popup.Header>Test Serial Number</Popup.Header>\n              <Popup.Content>Scan QR code on test or enter number manually</Popup.Content>\n            </Popup>\n          </label>\n          <div>\n            <Input\n              style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n              icon='hashtag'\n              iconPosition='left'\n              placeholder='Serial Number'\n              value={serial}\n              onChange={(e) => setSerial(e.target.value)}\n            />\n          </div>\n          <Button\n              style={{\n                backgroundColor: \"#18A33C\",\n                color: \"white\",\n                width: 160,\n                marginTop: 5\n                }}\n              onClick={() => setshowQR(false)}\n            >\n            Submit\n          </Button>\n        </Form.Field>\n      }\n\n    </div>\n  )\n\n}\n\nexport default QRScan;\n"]},"metadata":{},"sourceType":"module"}