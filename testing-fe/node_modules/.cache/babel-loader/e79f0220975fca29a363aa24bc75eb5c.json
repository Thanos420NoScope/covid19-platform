{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRScan.js\";\nimport React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader';\nimport PactCallContext from '../contexts/PactCallContext';\n\nconst QRScan = () => {\n  const pcContext = useContext(PactCallContext);\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [chainId, setChainId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async (pubKey, chainId) => {\n    setLoading(true);\n    const res = await pcContext.getTest(pubKey, chainId);\n    console.log(res);\n\n    if (res === \"failure\") {\n      //this public key was never registered on chain -> SHOW ERROR\n      setScanType('not registered on the blockchain');\n    } else {\n      if (res[\"test-init-bh\"][\"int\"] === 0) {\n        //test is registered and not used yet -> SHOW INIT TEST\n        setScanType('init');\n      }\n\n      if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-end-bh\"][\"int\"] === 0) {\n        //test is registered and administered -> SHOW END TEST\n        setScanType('end');\n      }\n\n      if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-end-bh\"][\"int\"] !== 0) {\n        //test has already been used -> SHOW ERROR\n        setScanType('already used');\n      }\n    }\n\n    setLoading(false);\n  };\n\n  const errorComponent = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"red\",\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Invalid Test!\"), `Please report immediately. This test is compromised as it was ${scanType}`));\n  };\n\n  const handleQRScan = data => {\n    if (data) {\n      console.log(data);\n      data = JSON.parse(data);\n      console.log(data);\n\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setPrivKey(data.keypair.secretKey);\n        setChainId(data.chainId);\n        setshowQR(false);\n        getInfo(data.keypair.publicKey, data.chainId);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly');\n      }\n    }\n  };\n\n  const handleQRError = err => {\n    console.error(err);\n  };\n\n  return React.createElement(Segment, {\n    style: {\n      margin: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h1\",\n    textAlign: \"center\",\n    style: {\n      color: \"#054F9E\",\n      marginBottom: 10,\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Scan QR Code\"), loading ? React.createElement(Loader, {\n    active: true,\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }) : scanType === \"\" ? showQR ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    onError: handleQRError,\n    onScan: handleQRScan,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      width: 160,\n      marginTop: 15\n    },\n    onClick: () => setshowQR(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Close and Type\")) : React.createElement(Form.Field, {\n    style: {\n      width: \"240px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\",\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Test Public Key\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Test Public Key\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Enter Public Key displayed under QR code\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"key\",\n    iconPosition: \"left\",\n    placeholder: \"Public Key\",\n    value: pubKey,\n    onChange: e => setPubKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Test Secret Key\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Test Secret Key\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Enter Secret Key displayed under QR code\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Secret Key\",\n    value: privKey,\n    onChange: e => setPrivKey(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    style: {\n      color: \"#054F9E\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Test Chain ID\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Test Chain ID\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Enter Chain ID displayed under QR code (0-9)\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"chain\",\n    iconPosition: \"left\",\n    placeholder: \"Chain ID\",\n    value: chainId,\n    onChange: e => setChainId(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      color: \"white\",\n      width: 240,\n      marginTop: 5\n    },\n    onClick: async () => await getInfo(pubKey, chainId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Submit\")) : scanType === 'init' ? React.createElement(InitRecord, {\n    pubKey: pubKey,\n    chainId: chainId,\n    privKey: privKey,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }) : scanType === 'end' ? React.createElement(EndRecord, {\n    pubKey: pubKey,\n    chainId: chainId,\n    privKey: privKey,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }) : errorComponent()));\n};\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRScan.js"],"names":["React","useState","useEffect","useContext","Fragment","useRef","Button","Grid","Input","Icon","Form","List","Label","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","Segment","InitRecord","EndRecord","QrReader","PactCallContext","QRScan","pcContext","showQR","setshowQR","pubKey","setPubKey","privKey","setPrivKey","chainId","setChainId","loading","setLoading","scanType","setScanType","getInfo","res","getTest","console","log","errorComponent","marginBottom","handleQRScan","data","JSON","parse","keypair","publicKey","secretKey","handleQRError","err","error","margin","marginTop","color","backgroundColor","width","fontWeight","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2DC,MAA3D,QAAyE,OAAzE;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgDC,KAAhD,EACGC,KADH,EACUC,MADV,EACkBC,OADlB,EAC2BC,KAD3B,EACkCC,MADlC,EAC0CC,KAD1C,EAEGC,GAFH,EAEQC,QAFR,EAEkBC,MAFlB,EAE0BC,OAF1B,QAEyC,mBAFzC;AAGA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAEnB,QAAMC,SAAS,GAAGzB,UAAU,CAACuB,eAAD,CAA5B;AAEA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC8B,MAAD,EAASC,SAAT,IAAsB/B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoC,OAAD,EAAUC,UAAV,IAAwBrC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsC,QAAD,EAAWC,WAAX,IAA0BvC,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMwC,OAAO,GAAG,OAAOV,MAAP,EAAeI,OAAf,KAA2B;AACzCG,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMI,GAAG,GAAG,MAAMd,SAAS,CAACe,OAAV,CAAkBZ,MAAlB,EAA0BI,OAA1B,CAAlB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAIA,GAAG,KAAK,SAAZ,EAAuB;AACrB;AACAF,MAAAA,WAAW,CAAC,kCAAD,CAAX;AACD,KAHD,MAGO;AACL,UAAIE,GAAG,CAAC,cAAD,CAAH,CAAoB,KAApB,MAA+B,CAAnC,EAAqC;AACnC;AACAF,QAAAA,WAAW,CAAC,MAAD,CAAX;AACD;;AAAC,UAAIE,GAAG,CAAC,cAAD,CAAH,CAAoB,KAApB,MAA+B,CAA/B,IAAoCA,GAAG,CAAC,aAAD,CAAH,CAAmB,KAAnB,MAA8B,CAAtE,EAAyE;AACzE;AACAF,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAAC,UAAIE,GAAG,CAAC,cAAD,CAAH,CAAoB,KAApB,MAA+B,CAA/B,IAAoCA,GAAG,CAAC,aAAD,CAAH,CAAmB,KAAnB,MAA8B,CAAtE,EAAyE;AACzE;AACAF,QAAAA,WAAW,CAAC,cAAD,CAAX;AACD;AACF;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GApBD;;AAsBA,QAAMQ,cAAc,GAAG,MAAM;AAC3B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIM,iEAAgER,QAAS,EAJ/E,CADF,CADF;AAUD,GAXD;;AAaA,QAAMS,YAAY,GAAGC,IAAI,IAAI;AAC3B,QAAIA,IAAJ,EAAU;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACAA,MAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AACA,UAAIA,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACd,OAAzB,EAAkC;AAChCH,QAAAA,SAAS,CAACiB,IAAI,CAACG,OAAL,CAAaC,SAAd,CAAT;AACAnB,QAAAA,UAAU,CAACe,IAAI,CAACG,OAAL,CAAaE,SAAd,CAAV;AACAlB,QAAAA,UAAU,CAACa,IAAI,CAACd,OAAN,CAAV;AACAL,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAW,QAAAA,OAAO,CAACQ,IAAI,CAACG,OAAL,CAAaC,SAAd,EAAyBJ,IAAI,CAACd,OAA9B,CAAP;AACD,OAND,MAMO;AACL;AACAK,QAAAA,WAAW,CAAC,uBAAD,CAAX;AACD;AACF;AAEF,GAjBD;;AAmBA,QAAMe,aAAa,GAAGC,GAAG,IAAI;AAC3BZ,IAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACD,GAFD;;AAIA,SACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAoC,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,SAAR;AAAmBb,MAAAA,YAAY,EAAE,EAAjC;AAAqCY,MAAAA,SAAS,EAAE;AAAhD,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,EAIEtB,OAAO,GAAG,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,MAAM,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACNE,QAAQ,KAAK,EAAb,GACEV,MAAM,GACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAE0B,aADX;AAEE,IAAA,MAAM,EAAEP,YAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE;AACLa,MAAAA,eAAe,EAAE,SADZ;AAELD,MAAAA,KAAK,EAAE,OAFF;AAGLE,MAAAA,KAAK,EAAE,GAHF;AAILH,MAAAA,SAAS,EAAE;AAJN,KADX;AAOI,IAAA,OAAO,EAAE,MAAM7B,SAAS,CAAC,KAAD,CAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,CADC,GAmBD,oBAAC,IAAD,CAAM,KAAN;AAAa,IAAA,KAAK,EAAE;AAACgC,MAAAA,KAAK,EAAC,OAAP;AAAgBJ,MAAAA,MAAM,EAAE,QAAxB;AAAkCC,MAAAA,SAAS,EAAE,MAA7C;AAAqDZ,MAAAA,YAAY,EAAE;AAAnE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,KAAK,EAAE;AAACa,MAAAA,KAAK,EAAE,SAAR;AAAmBG,MAAAA,UAAU,EAAE,MAA/B;AAAuChB,MAAAA,YAAY,EAAE;AAArD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EACL,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,KAAK,EAAE;AAAC,sBAAc;AAAf,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIE,IAAA,QAAQ,EAAC,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANF,EAOE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAPF,CADF,CADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE;AAACe,MAAAA,KAAK,EAAC,OAAP;AAAgBf,MAAAA,YAAY,EAAE,CAA9B;AAAiCY,MAAAA,SAAS,EAAE;AAA5C,KADT;AAEE,IAAA,IAAI,EAAC,KAFP;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,WAAW,EAAC,YAJd;AAKE,IAAA,KAAK,EAAE5B,MALT;AAME,IAAA,QAAQ,EAAGiC,CAAD,IAAOhC,SAAS,CAACgC,CAAC,CAACC,MAAF,CAASC,KAAV,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,EAyBE;AAAO,IAAA,KAAK,EAAE;AAACN,MAAAA,KAAK,EAAE,SAAR;AAAmBG,MAAAA,UAAU,EAAE,MAA/B;AAAuChB,MAAAA,YAAY,EAAE;AAArD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EACL,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,KAAK,EAAE;AAAC,sBAAc;AAAf,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIE,IAAA,QAAQ,EAAC,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBANF,EAOE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAPF,CADF,CAzBF,EAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE;AAACe,MAAAA,KAAK,EAAC,OAAP;AAAgBf,MAAAA,YAAY,EAAE,CAA9B;AAAiCY,MAAAA,SAAS,EAAE;AAA5C,KADT;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,WAAW,EAAC,YAJd;AAKE,IAAA,KAAK,EAAE1B,OALT;AAME,IAAA,QAAQ,EAAG+B,CAAD,IAAO9B,UAAU,CAAC8B,CAAC,CAACC,MAAF,CAASC,KAAV,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CApCF,EAgDE;AAAO,IAAA,KAAK,EAAE;AAACN,MAAAA,KAAK,EAAE,SAAR;AAAmBG,MAAAA,UAAU,EAAE,MAA/B;AAAuChB,MAAAA,YAAY,EAAE;AAArD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EACL,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,KAAK,EAAE;AAAC,sBAAc;AAAf,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIE,IAAA,QAAQ,EAAC,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANF,EAOE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAPF,CADF,CAhDF,EA2DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE;AAACe,MAAAA,KAAK,EAAC,OAAP;AAAgBf,MAAAA,YAAY,EAAE,CAA9B;AAAiCY,MAAAA,SAAS,EAAE;AAA5C,KADT;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,WAAW,EAAC,UAJd;AAKE,IAAA,KAAK,EAAExB,OALT;AAME,IAAA,QAAQ,EAAG6B,CAAD,IAAO5B,UAAU,CAAC4B,CAAC,CAACC,MAAF,CAASC,KAAV,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA3DF,EAyEE,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE;AACLL,MAAAA,eAAe,EAAE,SADZ;AAELD,MAAAA,KAAK,EAAE,OAFF;AAGLE,MAAAA,KAAK,EAAE,GAHF;AAILH,MAAAA,SAAS,EAAE;AAJN,KADX;AAOI,IAAA,OAAO,EAAE,YAAY,MAAMlB,OAAO,CAACV,MAAD,EAASI,OAAT,CAPtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzEF,CApBP,GA0GUI,QAAQ,KAAK,MAAb,GAAsB,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAER,MAApB;AAA4B,IAAA,OAAO,EAAEI,OAArC;AAA8C,IAAA,OAAO,EAAEF,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtB,GAA2FM,QAAQ,KAAK,KAAb,GAAqB,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAER,MAAnB;AAA2B,IAAA,OAAO,EAAEI,OAApC;AAA6C,IAAA,OAAO,EAAEF,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB,GAAwFa,cAAc,EA/G9M,CADA,CADF;AAwHD,CA7LD;;AA+LA,eAAenB,MAAf","sourcesContent":["import React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader'\nimport PactCallContext from '../contexts/PactCallContext'\n\n\nconst QRScan = () => {\n\n  const pcContext = useContext(PactCallContext);\n\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [chainId, setChainId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async (pubKey, chainId) => {\n    setLoading(true)\n    const res = await pcContext.getTest(pubKey, chainId);\n    console.log(res);\n    if (res === \"failure\") {\n      //this public key was never registered on chain -> SHOW ERROR\n      setScanType('not registered on the blockchain')\n    } else {\n      if (res[\"test-init-bh\"][\"int\"] === 0){\n        //test is registered and not used yet -> SHOW INIT TEST\n        setScanType('init')\n      } if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-end-bh\"][\"int\"] === 0) {\n        //test is registered and administered -> SHOW END TEST\n        setScanType('end')\n      } if (res[\"test-init-bh\"][\"int\"] !== 0 && res[\"test-end-bh\"][\"int\"] !== 0) {\n        //test has already been used -> SHOW ERROR\n        setScanType('already used')\n      }\n    }\n    setLoading(false);\n  }\n\n  const errorComponent = () => {\n    return (\n      <div>\n        <Message color='red' style={{marginBottom: 20}}>\n          <Message.Header>\n            Invalid Test!\n          </Message.Header>\n            {`Please report immediately. This test is compromised as it was ${scanType}`}\n        </Message>\n      </div>\n    );\n  }\n\n  const handleQRScan = data => {\n    if (data) {\n      console.log(data);\n      data = JSON.parse(data);\n      console.log(data);\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setPrivKey(data.keypair.secretKey);\n        setChainId(data.chainId);\n        setshowQR(false);\n        getInfo(data.keypair.publicKey, data.chainId);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly')\n      }\n    }\n\n  }\n\n  const handleQRError = err => {\n    console.error(err)\n  }\n\n  return (\n    <Segment style={{ margin: 10 }}>\n    <div style={{marginTop: 20}}>\n    <Header as='h1'  textAlign='center' style={{color: \"#054F9E\", marginBottom: 10, marginTop: 10 }}>\n      Scan QR Code\n    </Header>\n    {(loading ? <Loader active inline /> :\n      (scanType === \"\" ?\n        (showQR ?\n              <div>\n                <QrReader\n                  onError={handleQRError}\n                  onScan={handleQRScan}\n                />\n                <Button\n                    style={{\n                      backgroundColor: \"#054F9E\",\n                      color: \"white\",\n                      width: 160,\n                      marginTop: 15\n                      }}\n                    onClick={() => setshowQR(false)}\n                  >\n                  Close and Type\n                </Button>\n              </div>\n              :\n              <Form.Field  style={{width:\"240px\", margin: \"0 auto\", marginTop: \"10px\", marginBottom: 0}} >\n                <label style={{color: \"#054F9E\", fontWeight: 'bold', marginBottom: 20}}>Test Public Key\n                  <Popup\n                    trigger={\n                      <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                    }\n                    position='top center'\n                  >\n                    <Popup.Header>Test Public Key</Popup.Header>\n                    <Popup.Content>Enter Public Key displayed under QR code</Popup.Content>\n                  </Popup>\n                </label>\n                <div>\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='key'\n                    iconPosition='left'\n                    placeholder='Public Key'\n                    value={pubKey}\n                    onChange={(e) => setPubKey(e.target.value)}\n                  />\n\n                </div>\n\n\n                <label style={{color: \"#054F9E\", fontWeight: 'bold', marginBottom: 20}}>Test Secret Key\n                  <Popup\n                    trigger={\n                      <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                    }\n                    position='top center'\n                  >\n                    <Popup.Header>Test Secret Key</Popup.Header>\n                    <Popup.Content>Enter Secret Key displayed under QR code</Popup.Content>\n                  </Popup>\n                </label>\n                <div>\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='lock'\n                    iconPosition='left'\n                    placeholder='Secret Key'\n                    value={privKey}\n                    onChange={(e) => setPrivKey(e.target.value)}\n                  />\n\n                </div>\n\n                <label style={{color: \"#054F9E\", fontWeight: 'bold', marginBottom: 20}}>Test Chain ID\n                  <Popup\n                    trigger={\n                      <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                    }\n                    position='top center'\n                  >\n                    <Popup.Header>Test Chain ID</Popup.Header>\n                    <Popup.Content>Enter Chain ID displayed under QR code (0-9)</Popup.Content>\n                  </Popup>\n                </label>\n                <div>\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='chain'\n                    iconPosition='left'\n                    placeholder='Chain ID'\n                    value={chainId}\n                    onChange={(e) => setChainId(e.target.value)}\n                  />\n\n                </div>\n\n\n\n                <Button\n                    style={{\n                      backgroundColor: \"#054F9E\",\n                      color: \"white\",\n                      width: 240,\n                      marginTop: 5\n                      }}\n                    onClick={async () => await getInfo(pubKey, chainId)}\n\n                  >\n                  Submit\n                </Button>\n              </Form.Field>\n            ) : (scanType === 'init' ? <InitRecord pubKey={pubKey} chainId={chainId} privKey={privKey}/> : (scanType === 'end' ? <EndRecord pubKey={pubKey} chainId={chainId} privKey={privKey}/> : errorComponent())))\n    )}\n\n    </div>\n    </Segment>\n  )\n\n}\n\nexport default QRScan;\n"]},"metadata":{},"sourceType":"module"}