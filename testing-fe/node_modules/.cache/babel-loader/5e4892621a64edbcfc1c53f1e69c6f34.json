{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/contexts/AuthContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\nimport uuid from 'react-uuid';\n\nconst keys = require('../config.json');\n\nvar hash = require('object-hash');\n\nconst Context = React.createContext();\nconst logged = localStorage.getItem('logged');\nconst docUuid = localStorage.getItem('uuid'); //simulating 3 mins\n// const time = 180;\n\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class AuthStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      logged: logged,\n      loading: false,\n      showErr: false,\n      errMsg: '',\n      loadMsg: false,\n      docUuid: docUuid,\n      docTxs: [],\n      docInfo: {\n        uuid: \"\",\n        approved: \"\",\n        name: \"\",\n        hospital: \"\",\n        json: \"\",\n        public_key: \"\",\n        private_key: \"\",\n        kuuid: \"\"\n      }\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.setLogged = async bool => {\n      this.setState({\n        logged: true\n      });\n      await localStorage.setItem('logged', true);\n    };\n\n    this.fetchDocInfo = async uuid => {\n      const res = await fetch(`https://api.rapidcovid19.rymedi.com/doctors/${uuid}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"GET\"\n      });\n      const json = await res.json();\n      await this.setState({\n        docInfo: json\n      });\n    };\n\n    this.fetchDocTxs = async uuid => {\n      const resInit = await fetch(`https://api.rapidcovid19.rymedi.com/records/init/${uuid}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"GET\"\n      });\n      const resEnd = await fetch(`https://api.rapidcovid19.rymedi.com/records/end/${uuid}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"GET\"\n      });\n      const jsonInit = await resInit.json();\n      const jsonEnd = await resEnd.json();\n      const arrInit = jsonInit.message ? [] : jsonInit;\n      const arrEnd = jsonEnd.message ? [] : jsonEnd;\n      const set = new Set(arrInit.concat(arrEnd));\n      await this.setState({\n        docTxs: [...set]\n      });\n    };\n\n    this.logout = async () => {\n      this.setState({\n        logged: \"\"\n      });\n      await localStorage.setItem('logged', \"\");\n      window.location.reload();\n    };\n\n    this.login = async (username, password) => {\n      await this.setState({\n        loading: true\n      }); // app.get(\"/auth/username/:username\", cors(), auth.findUsername);\n\n      const res = await fetch(`https://api.rapidcovid19.rymedi.com/auth/username/${username}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"GET\"\n      });\n      const json = await res.json();\n\n      if (json.message) {\n        alert(\"invalid username\");\n      } else {\n        if (json.password === password) {\n          await localStorage.setItem('uuid', json.uuid);\n          await this.setState({\n            docUuid: json.uuid\n          });\n          await this.setLogged(true);\n        } else {\n          alert(\"invalid password\");\n        }\n      }\n\n      await this.setState({\n        loading: false\n      }); // alert(\"unknown uuid\")\n    };\n\n    this.registerAuthTable = async (ak, uuid, username, password) => {\n      await fetch(`https://api.rapidcovid19.rymedi.com/auth/key/${ak}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"PUT\",\n        body: JSON.stringify({\n          uuid: uuid,\n          username: username,\n          password: password\n        })\n      });\n    };\n\n    this.usernameExists = async username => {\n      const res = await fetch(`https://api.rapidcovid19.rymedi.com/usernames`);\n      const array = await res.json();\n      const exists = array.includes(username);\n\n      if (exists) {\n        await this.setState({\n          showErr: true,\n          errMsg: \"selected username already exists\",\n          loading: false\n        });\n        return false;\n      } else {\n        await this.setState({\n          showErr: false,\n          errMsg: \"\"\n        });\n        return true;\n      }\n    };\n\n    this.checkAccessKey = async ak => {\n      const res = await fetch(`https://api.rapidcovid19.rymedi.com/auth/${ak}`);\n      const json = await res.json();\n\n      if (json.message) {\n        await this.setState({\n          showErr: true,\n          errMsg: \"access key does not exist\",\n          loading: false\n        });\n        return false;\n      }\n\n      if (json.uuid === null) {\n        await this.setState({\n          showErr: false,\n          errMsg: \"\"\n        });\n        return true;\n      }\n\n      await this.setState({\n        showErr: true,\n        errMsg: \"access key has already been used\",\n        loading: false\n      });\n      return false;\n    };\n\n    this.registerDocTable = async (uuid, name, hospital, json, publicKey, privateKey, reqKey) => {\n      await fetch(`https://api.rapidcovid19.rymedi.com/doctors`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          uuid: uuid,\n          name: name,\n          approved: true,\n          hospital: hospital,\n          json: json,\n          public_key: publicKey,\n          private_key: privateKey,\n          kuuid: reqKey\n        })\n      });\n    };\n\n    this.signup = async (ak, name, hospital, username, password) => {\n      await this.setState({\n        loading: true\n      }); //check access key is correct\n\n      const rightAk = await this.checkAccessKey(ak);\n\n      if (!rightAk) {\n        return;\n      } //check username is unique\n\n\n      const exists = await this.usernameExists(username);\n\n      if (!exists) {\n        return;\n      } //sign up doctor on blockchain\n\n\n      await this.setState({\n        loadMsg: true\n      }); //generate a keyapir for doctor\n\n      const docKP = Pact.crypto.genKeyPair(); //get rymedi keypair\n\n      const rymediKP = keys.rymediKeys; //generate a uuid for doctor\n\n      const docUuid = uuid(); //prepare json for db column\n\n      const dbJSON = JSON.stringify({\n        uuid: uuid,\n        hospital: hospital,\n        name: name,\n        approved: true\n      }); //hash json for blockchain\n\n      const hashedJSON = hash(dbJSON); //send call to kadena blockchain\n\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.rymedi-covid.init-doctor ${JSON.stringify(hashedJSON)} ${JSON.stringify(docUuid)})`,\n        keyPairs: [{ ...rymediKP,\n          clist: [{\n            name: \"coin.GAS\",\n            args: []\n          }, {\n            name: \"user.rymedi-covid.ADMIN\",\n            args: []\n          }]\n        }],\n        envData: {\n          \"doc-ks\": {\n            \"pred\": \"keys-all\",\n            \"keys\": [docKP.publicKey]\n          }\n        },\n        meta: Pact.lang.mkMeta(\"rymedi\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], \"0\"));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        }\n\n        console.log('out of the loop');\n        console.log(pollRes); //tx successful\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          //doc registered on blockchain, now add to db\n          await this.registerAuthTable(ak, docUuid, username, password);\n          await this.registerDocTable(docUuid, name, hospital, dbJSON, docKP.publicKey, docKP.secretKey, reqKey.requestKeys[0]);\n          await this.login(username, password);\n          await this.setState({\n            loading: false\n          }); //tx unsuccessful\n        } else {\n          alert(\"there was a problem signing you up in Kadena mainnet blockchain, please try signing up again later\");\n          window.location.reload();\n        }\n      } else {\n        //blockchain call had formatting issues\n        alert(\"our systems are temporarily down, please try signing up again later\");\n        window.location.reload();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        setLogged: this.setLogged,\n        login: this.login,\n        logout: this.logout,\n        signup: this.signup,\n        usernameExists: this.usernameExists,\n        checkAccessKey: this.checkAccessKey,\n        fetchDocInfo: this.fetchDocInfo,\n        fetchDocTxs: this.fetchDocTxs\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/contexts/AuthContext.js"],"names":["React","Pact","uuid","keys","require","hash","Context","createContext","logged","localStorage","getItem","docUuid","hosts","createAPIHost","network","chainId","AuthStore","Component","state","loading","showErr","errMsg","loadMsg","docTxs","docInfo","approved","name","hospital","json","public_key","private_key","kuuid","wait","timeout","Promise","resolve","setTimeout","setLogged","bool","setState","setItem","fetchDocInfo","res","fetch","headers","method","fetchDocTxs","resInit","resEnd","jsonInit","jsonEnd","arrInit","message","arrEnd","set","Set","concat","logout","window","location","reload","login","username","password","alert","registerAuthTable","ak","body","JSON","stringify","usernameExists","array","exists","includes","checkAccessKey","registerDocTable","publicKey","privateKey","reqKey","signup","rightAk","docKP","crypto","genKeyPair","rymediKP","rymediKeys","dbJSON","hashedJSON","send","networkId","pactCode","keyPairs","clist","args","envData","meta","lang","mkMeta","Math","round","Date","getTime","time","pollRes","poll","requestKeys","Object","length","console","log","result","status","secretKey","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nimport uuid from 'react-uuid'\nconst keys = require('../config.json')\nvar hash = require('object-hash');\n\nconst Context = React.createContext();\nconst logged = localStorage.getItem('logged')\nconst docUuid = localStorage.getItem('uuid');\n//simulating 3 mins\n// const time = 180;\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class AuthStore extends React.Component {\n\n  state = {\n    logged: logged,\n    loading: false,\n    showErr: false,\n    errMsg: '',\n    loadMsg: false,\n    docUuid: docUuid,\n    docTxs: [],\n    docInfo: {\n      uuid: \"\",\n      approved: \"\",\n      name: \"\",\n      hospital: \"\",\n      json: \"\",\n      public_key: \"\",\n      private_key: \"\",\n      kuuid: \"\"\n    }\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  setLogged = async (bool) => {\n    this.setState({logged: true})\n    await localStorage.setItem('logged', true);\n  }\n\n  fetchDocInfo = async (uuid) => {\n    const res = await fetch(`https://api.rapidcovid19.rymedi.com/doctors/${uuid}`, {headers: {\n      \"Content-Type\": \"application/json\"\n    }, method: \"GET\"});\n    const json = await res.json();\n    await this.setState({ docInfo: json })\n  }\n\n  fetchDocTxs = async (uuid) => {\n    const resInit = await fetch(`https://api.rapidcovid19.rymedi.com/records/init/${uuid}`, {headers: {\n      \"Content-Type\": \"application/json\"\n    }, method: \"GET\"});\n    const resEnd = await fetch(`https://api.rapidcovid19.rymedi.com/records/end/${uuid}`, {headers: {\n      \"Content-Type\": \"application/json\"\n    }, method: \"GET\"});\t \n    const jsonInit = await resInit.json();\n    const jsonEnd = await resEnd.json();\n    const arrInit = (jsonInit.message ? [] : jsonInit);\n    const arrEnd = (jsonEnd.message ? [] : jsonEnd);\n    const set = new Set(arrInit.concat(arrEnd));\n    await this.setState({ docTxs: [...set] });\n}\n\n  logout = async () => {\n    this.setState({logged: \"\"});\n    await localStorage.setItem('logged', \"\");\n    window.location.reload();\n  }\n\n\n  login = async (username, password) => {\n    await this.setState({ loading: true })\n      // app.get(\"/auth/username/:username\", cors(), auth.findUsername);\n    const res = await fetch(`https://api.rapidcovid19.rymedi.com/auth/username/${username}`, {headers: {\n      \"Content-Type\": \"application/json\"\n    }, method: \"GET\"});\n    const json = await res.json()\n    if (json.message) {\n      alert(\"invalid username\")\n    } else {\n      if (json.password === password) {\n        await localStorage.setItem('uuid', json.uuid);\n        await this.setState({ docUuid: json.uuid })\n        await this.setLogged(true)\n      } else {\n        alert(\"invalid password\")\n      }\n    }\n    await this.setState({ loading: false })\n    // alert(\"unknown uuid\")\n  }\n\n  registerAuthTable = async (ak, uuid, username, password) => {\n    await fetch(`https://api.rapidcovid19.rymedi.com/auth/key/${ak}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"PUT\",\n      body: JSON.stringify({\n        uuid: uuid,\n        username: username,\n        password: password\n      })\n    })\n  }\n\n  usernameExists = async (username) => {\n    const res = await fetch(`https://api.rapidcovid19.rymedi.com/usernames`)\n    const array = await res.json();\n    const exists = array.includes(username);\n    if (exists) {\n      await this.setState({ showErr: true, errMsg: \"selected username already exists\", loading: false })\n      return false;\n    } else {\n      await this.setState({ showErr: false, errMsg: \"\" })\n      return true;\n    }\n  }\n\n  checkAccessKey = async (ak) => {\n    const res = await fetch(`https://api.rapidcovid19.rymedi.com/auth/${ak}`);\n    const json = await res.json();\n    if (json.message) {\n      await this.setState({ showErr: true, errMsg: \"access key does not exist\", loading: false })\n      return false;\n    }\n    if (json.uuid === null) {\n      await this.setState({ showErr: false, errMsg: \"\" })\n      return true;\n    }\n    await this.setState({ showErr: true, errMsg: \"access key has already been used\", loading: false })\n    return false;\n  }\n\n\n  registerDocTable = async (uuid, name, hospital, json, publicKey, privateKey, reqKey) => {\n    await fetch(`https://api.rapidcovid19.rymedi.com/doctors`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        uuid: uuid,\n        name: name,\n        approved: true,\n        hospital: hospital,\n        json: json,\n        public_key: publicKey,\n        private_key: privateKey,\n        kuuid: reqKey\n      })\n    })\n  }\n\n  signup = async (ak, name, hospital, username, password) => {\n    await this.setState({loading: true})\n    //check access key is correct\n    const rightAk = await this.checkAccessKey(ak);\n    if (!rightAk) { return }\n    //check username is unique\n    const exists = await this.usernameExists(username);\n    if (!exists) { return }\n    //sign up doctor on blockchain\n    await this.setState({ loadMsg: true })\n    //generate a keyapir for doctor\n    const docKP = Pact.crypto.genKeyPair();\n    //get rymedi keypair\n    const rymediKP = keys.rymediKeys\n    //generate a uuid for doctor\n    const docUuid = uuid();\n    //prepare json for db column\n    const dbJSON = JSON.stringify({uuid: uuid, hospital: hospital, name: name, approved: true});\n    //hash json for blockchain\n    const hashedJSON = hash(dbJSON);\n    //send call to kadena blockchain\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.rymedi-covid.init-doctor ${JSON.stringify(hashedJSON)} ${JSON.stringify(docUuid)})`,\n        keyPairs: [{...rymediKP, clist: [{name: \"coin.GAS\", args: []}, {name: \"user.rymedi-covid.ADMIN\", args: []}]}],\n        envData: {\"doc-ks\": {\"pred\": \"keys-all\", \"keys\": [docKP.publicKey]}},\n        meta: Pact.lang.mkMeta(\"rymedi\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], \"0\"))\n    if (reqKey) {\n      //check kadena tx status every 10 seconds until we get a response (success or fail)\n      var time = 180;\n      var pollRes;\n      while (time > 0) {\n        await this.wait(10000);\n        pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], \"0\"));\n        if (Object.keys(pollRes).length === 0) {\n          console.log('no return poll');\n          console.log(pollRes)\n          time = time - 10\n        } else {\n          console.log(pollRes);\n          time = 0;\n        }\n      }\n      console.log('out of the loop')\n      console.log(pollRes);\n      //tx successful\n      if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n        //doc registered on blockchain, now add to db\n        await this.registerAuthTable(ak, docUuid, username, password);\n        await this.registerDocTable(docUuid, name, hospital, dbJSON, docKP.publicKey, docKP.secretKey, reqKey.requestKeys[0])\n        await this.login(username, password)\n        await this.setState({loading: false})\n      //tx unsuccessful\n      } else {\n        alert(\"there was a problem signing you up in Kadena mainnet blockchain, please try signing up again later\")\n        window.location.reload();\n      }\n    } else {\n      //blockchain call had formatting issues\n      alert(\"our systems are temporarily down, please try signing up again later\")\n      window.location.reload();\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          setLogged: this.setLogged,\n          login: this.login,\n          logout: this.logout,\n          signup: this.signup,\n          usernameExists: this.usernameExists,\n          checkAccessKey: this.checkAccessKey,\n          fetchDocInfo: this.fetchDocInfo,\n\t  fetchDocTxs: this.fetchDocTxs\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n\n"]},"metadata":{},"sourceType":"module"}