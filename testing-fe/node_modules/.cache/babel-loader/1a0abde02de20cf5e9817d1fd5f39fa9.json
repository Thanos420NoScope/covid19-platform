{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRPatient.js\";\nimport React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader';\nimport PactCallContext from '../contexts/PactCallContext';\n\nconst QRScan = () => {\n  const pcContext = useContext(PactCallContext);\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [chainId, setChainId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [scanType, setScanType] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n\n  const handleBarCodeScanned = async ({\n    type,\n    data\n  }) => {\n    setScanned(true); // alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n\n    const parsed = JSON.parse(data);\n    const keys = Object.keys(parsed);\n\n    if (keys.length === 3 && keys.includes(\"chainId\") && keys.includes(\"url\") && keys.includes(\"pubKey\")) {\n      await pactContext.handleQRScan(parsed);\n    } else {\n      alert('Invalid QR Code scanned. Please only scan QR codes from adhering partners');\n      setScanned(false);\n    }\n  };\n\n  const errorComponent = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Message, {\n      color: \"red\",\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Invalid Test!\"), `Please report immediately. This test is compromised as it was ${scanType}`));\n  };\n\n  const handleQRScan = data => {\n    if (data) {\n      console.log(data);\n      data = JSON.parse(data);\n      console.log(data);\n\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setPrivKey(data.keypair.secretKey);\n        setChainId(data.chainId);\n        setshowQR(false);\n        getInfo(data.keypair.publicKey, data.chainId);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly');\n      }\n    }\n  };\n\n  const handleQRError = err => {\n    console.error(err);\n  };\n\n  return React.createElement(Segment, {\n    style: {\n      margin: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, scanType === \"\" ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h1\",\n    textAlign: \"center\",\n    style: {\n      color: \"#054F9E\",\n      marginBottom: 20,\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, scanType === \"\" ? \"Scan QR Code\" : \"\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), loading ? React.createElement(Loader, {\n    active: true,\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }) : scanType === \"\" ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Message, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    onError: handleQRError,\n    onScan: handleQRScan,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(Header, {\n    as: \"h5\",\n    textAlign: \"center\",\n    style: {\n      color: \"#054F9E\",\n      marginLeft: 40,\n      marginRight: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"NOTE: Shown when doctor successfully administers test\")) : errorComponent()));\n};\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/QRPatient.js"],"names":["React","useState","useEffect","useContext","Fragment","useRef","Button","Grid","Input","Icon","Form","List","Label","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","Segment","InitRecord","EndRecord","QrReader","PactCallContext","QRScan","pcContext","showQR","setshowQR","pubKey","setPubKey","privKey","setPrivKey","chainId","setChainId","loading","setLoading","scanType","setScanType","model","setModel","brand","setBrand","handleBarCodeScanned","type","data","setScanned","parsed","JSON","parse","keys","Object","length","includes","pactContext","handleQRScan","alert","errorComponent","marginBottom","console","log","keypair","publicKey","secretKey","getInfo","handleQRError","err","error","margin","marginTop","color","marginLeft","marginRight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2DC,MAA3D,QAAyE,OAAzE;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgDC,KAAhD,EACGC,KADH,EACUC,MADV,EACkBC,OADlB,EAC2BC,KAD3B,EACkCC,MADlC,EAC0CC,KAD1C,EAEGC,GAFH,EAEQC,QAFR,EAEkBC,MAFlB,EAE0BC,OAF1B,QAEyC,mBAFzC;AAGA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAEnB,QAAMC,SAAS,GAAGzB,UAAU,CAACuB,eAAD,CAA5B;AAEA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC8B,MAAD,EAASC,SAAT,IAAsB/B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoC,OAAD,EAAUC,UAAV,IAAwBrC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsC,QAAD,EAAWC,WAAX,IAA0BvC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACwC,KAAD,EAAQC,QAAR,IAAoBzC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC0C,KAAD,EAAQC,QAAR,IAAoB3C,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAM4C,oBAAoB,GAAG,OAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP,KAA0B;AACnDC,IAAAA,UAAU,CAAC,IAAD,CAAV,CADmD,CAEnD;;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAf;AACA,UAAMK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,MAAZ,CAAb;;AACA,QAAIG,IAAI,CAACE,MAAL,KAAgB,CAAhB,IAAqBF,IAAI,CAACG,QAAL,CAAc,SAAd,CAArB,IAAiDH,IAAI,CAACG,QAAL,CAAc,KAAd,CAAjD,IAAyEH,IAAI,CAACG,QAAL,CAAc,QAAd,CAA7E,EAAsG;AACpG,YAAMC,WAAW,CAACC,YAAZ,CAAyBR,MAAzB,CAAN;AACD,KAFD,MAGK;AACHS,MAAAA,KAAK,CAAC,2EAAD,CAAL;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAZH;;AAeA,QAAMW,cAAc,GAAG,MAAM;AAC3B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIM,iEAAgErB,QAAS,EAJ/E,CADF,CADF;AAUD,GAXD;;AAaA,QAAMkB,YAAY,GAAGV,IAAI,IAAI;AAC3B,QAAIA,IAAJ,EAAU;AACRc,MAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACAA,MAAAA,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;;AACA,UAAIA,IAAI,CAACgB,OAAL,IAAgBhB,IAAI,CAACZ,OAAzB,EAAkC;AAChCH,QAAAA,SAAS,CAACe,IAAI,CAACgB,OAAL,CAAaC,SAAd,CAAT;AACA9B,QAAAA,UAAU,CAACa,IAAI,CAACgB,OAAL,CAAaE,SAAd,CAAV;AACA7B,QAAAA,UAAU,CAACW,IAAI,CAACZ,OAAN,CAAV;AACAL,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAoC,QAAAA,OAAO,CAACnB,IAAI,CAACgB,OAAL,CAAaC,SAAd,EAAyBjB,IAAI,CAACZ,OAA9B,CAAP;AACD,OAND,MAMO;AACL;AACAK,QAAAA,WAAW,CAAC,uBAAD,CAAX;AACD;AACF;AAEF,GAjBD;;AAmBA,QAAM2B,aAAa,GAAGC,GAAG,IAAI;AAC3BP,IAAAA,OAAO,CAACQ,KAAR,CAAcD,GAAd;AACD,GAFD;;AAIA,SACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEhC,QAAQ,KAAK,EAAb,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAoC,IAAA,KAAK,EAAE;AAACiC,MAAAA,KAAK,EAAE,SAAR;AAAmBZ,MAAAA,YAAY,EAAE,EAAjC;AAAqCW,MAAAA,SAAS,EAAE;AAAhD,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIhC,QAAQ,KAAK,EAAb,GAAkB,cAAlB,GAAmC,EADvC,CADF,CADA,GAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH,EAQEF,OAAO,GAAG,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,MAAM,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACNE,QAAQ,KAAK,EAAb,GAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,OAAO,EAAE4B,aADX;AAEE,IAAA,MAAM,EAAEV,YAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAoC,IAAA,KAAK,EAAE;AAACe,MAAAA,KAAK,EAAE,SAAR;AAAmBC,MAAAA,UAAU,EAAE,EAA/B;AAAmCC,MAAAA,WAAW,EAAE;AAAhD,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAPF,CAFP,GAcCf,cAAc,EAvBlB,CADA,CADF;AAiCD,CAjGD;;AAmGA,eAAehC,MAAf","sourcesContent":["import React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader, Segment } from 'semantic-ui-react';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader'\nimport PactCallContext from '../contexts/PactCallContext'\n\n\nconst QRScan = () => {\n\n  const pcContext = useContext(PactCallContext);\n\n  const [showQR, setshowQR] = useState(true);\n  const [pubKey, setPubKey] = useState(\"\");\n  const [privKey, setPrivKey] = useState(\"\");\n  const [chainId, setChainId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [scanType, setScanType] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n\n  const handleBarCodeScanned = async ({ type, data }) => {\n      setScanned(true);\n      // alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n      const parsed = JSON.parse(data)\n      const keys = Object.keys(parsed)\n      if (keys.length === 3 && keys.includes(\"chainId\") && keys.includes(\"url\") && keys.includes(\"pubKey\")) {\n        await pactContext.handleQRScan(parsed);\n      }\n      else {\n        alert('Invalid QR Code scanned. Please only scan QR codes from adhering partners')\n        setScanned(false)\n      }\n    };\n\n\n  const errorComponent = () => {\n    return (\n      <div>\n        <Message color='red' style={{marginBottom: 20}}>\n          <Message.Header>\n            Invalid Test!\n          </Message.Header>\n            {`Please report immediately. This test is compromised as it was ${scanType}`}\n        </Message>\n      </div>\n    );\n  }\n\n  const handleQRScan = data => {\n    if (data) {\n      console.log(data);\n      data = JSON.parse(data);\n      console.log(data);\n      if (data.keypair && data.chainId) {\n        setPubKey(data.keypair.publicKey);\n        setPrivKey(data.keypair.secretKey);\n        setChainId(data.chainId);\n        setshowQR(false);\n        getInfo(data.keypair.publicKey, data.chainId);\n      } else {\n        //QR code data format invalid\n        setScanType('formatted incorrectly')\n      }\n    }\n\n  }\n\n  const handleQRError = err => {\n    console.error(err)\n  }\n\n  return (\n    <Segment style={{ margin: 10 }}>\n    <div style={{marginTop: 10}}>\n    {(scanType === \"\" ?\n      <div>\n        <Header as='h1'  textAlign='center' style={{color: \"#054F9E\", marginBottom: 20, marginTop: 0 }}>\n          {(scanType === \"\" ? \"Scan QR Code\" : \"\")}\n        </Header>\n      </div>\n     : <div></div>)}\n    {(loading ? <Loader active inline /> :\n      (scanType === \"\"\n        ?\n              <div>\n                <Message color=\"blue\">\n                  <QrReader\n                    onError={handleQRError}\n                    onScan={handleQRScan}\n                  />\n                </Message>\n                <Header as='h5'  textAlign='center' style={{color: \"#054F9E\", marginLeft: 40, marginRight: 40}}>\n                  NOTE: Shown when doctor successfully administers test\n                </Header>\n              </div>\n        :\n        errorComponent()\n      )\n    )}\n\n    </div>\n    </Segment>\n  )\n\n}\n\nexport default QRScan;\n"]},"metadata":{},"sourceType":"module"}