{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/History.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader, Segment, Table } from 'semantic-ui-react';\nimport PactCallContext from '../contexts/PactCallContext';\n\nconst History = () => {\n  const pcContext = useContext(PactCallContext);\n\n  const showDate = item => {\n    const unix = Date.parse(item.test[\"last-mod-time\"][\"timep\"]);\n    const d = new Date(unix);\n    return `${d.getDate()}/${d.getMonth()}/${d.getFullYear()}`;\n  };\n\n  const renderRows = async () => {\n    let components = [];\n\n    if (pcContext.scans.length !== 0) {\n      console.log(pcContext.scans);\n      pcContext.scans.map((s, i) => {\n        components.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, s.test[\"test-manufacturer\"]), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, s.test[\"test-model\"]), React.createElement(Table.Cell, {\n          negative: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, showDate(s)), React.createElement(Table.Cell, {\n          negative: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: s.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Kadena Block Explorer Link\")))));\n      });\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h5\",\n        textAlign: \"center\",\n        style: {\n          color: \"#054F9E\",\n          marginLeft: 40,\n          marginRight: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"No Tests scanned yet!\"));\n    }\n\n    return components;\n  };\n\n  return React.createElement(Segment, {\n    style: {\n      margin: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Table, {\n    celled: true,\n    textAlign: \"center\",\n    columns: 4,\n    compact: true,\n    basic: true,\n    padded: true,\n    striped: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    style: {\n      backgroundColor: \"#054F9E\",\n      opactiy: 0.8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    style: {\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Model\"), React.createElement(Table.HeaderCell, {\n    style: {\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Brand\"), React.createElement(Table.HeaderCell, {\n    style: {\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Adminitered\"), React.createElement(Table.HeaderCell, {\n    style: {\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Result\"))), pcContext.scans.length !== 0 ? React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, pcContext.scans.map((s, i) => {\n    return React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, s.test[\"test-manufacturer\"]), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, s.test[\"test-model\"]), React.createElement(Table.Cell, {\n      negative: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: s.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, showDate(s))), React.createElement(Table.Cell, {\n      style: {\n        backgroundColor: s.test[\"test-end-bh\"][\"int\"] === 0 ? 'grey' : s.test[\"result\"] === 'positive' ? 'green' : 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, s.test[\"test-end-bh\"][\"int\"] === 0 ? 'administered' : s.test[\"result\"]));\n  })) : React.createElement(Header, {\n    as: \"h5\",\n    textAlign: \"center\",\n    style: {\n      color: \"#054F9E\",\n      marginLeft: 40,\n      marginRight: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"No Tests scanned yet!\"))));\n};\n\nexport default History; // <Table.Body>\n//   <Table.Row>\n//     <Table.Cell>No Name Specified</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell negative>None</Table.Cell>\n//     <Table.Cell negative>hi</Table.Cell>\n//   </Table.Row>\n//   <Table.Row positive>\n//     <Table.Cell>Jimmy</Table.Cell>\n//     <Table.Cell>\n//       <Icon name='checkmark' />\n//       Approved\n//     </Table.Cell>\n//     <Table.Cell>None</Table.Cell>\n//   </Table.Row>\n//   <Table.Row>\n//     <Table.Cell>Jamie</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell positive>\n//       <Icon name='close' />\n//       Requires call\n//     </Table.Cell>\n//   </Table.Row>\n//   <Table.Row negative>\n//     <Table.Cell>Jill</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell>None</Table.Cell>\n//   </Table.Row>\n// </Table.Body>","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/components/History.js"],"names":["React","useState","useEffect","useContext","Button","Grid","Input","Icon","Form","List","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","Segment","Table","PactCallContext","History","pcContext","showDate","item","unix","Date","parse","test","d","getDate","getMonth","getFullYear","renderRows","components","scans","length","console","log","map","s","i","push","url","color","marginLeft","marginRight","margin","marginTop","backgroundColor","opactiy"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Grid, Input, Icon, Form, List,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader, Segment, Table } from 'semantic-ui-react';\nimport PactCallContext from '../contexts/PactCallContext'\n\nconst History = () => {\n\n  const pcContext = useContext(PactCallContext);\n\n  const showDate = (item) => {\n    const unix = Date.parse(item.test[\"last-mod-time\"][\"timep\"])\n    const d = new Date(unix)\n    return `${d.getDate()}/${d.getMonth()}/${d.getFullYear()}`\n  }\n\n  const renderRows = async () => {\n    let components = []\n    if (pcContext.scans.length !== 0) {\n      console.log(pcContext.scans)\n      pcContext.scans.map((s, i) => {\n        components.push(\n          <div>\n            <Table.Row>\n              <Table.Cell>{s.test[\"test-manufacturer\"]}</Table.Cell>\n              <Table.Cell>{s.test[\"test-model\"]}</Table.Cell>\n              <Table.Cell negative>{showDate(s)}</Table.Cell>\n              <Table.Cell negative>\n                <a href={s.url}>\n                  Kadena Block Explorer Link\n                </a>\n              </Table.Cell>\n            </Table.Row>\n          </div>\n        )\n      })\n    } else {\n      return (\n        <div>\n          <Header as='h5'  textAlign='center' style={{color: \"#054F9E\", marginLeft: 40, marginRight: 40}}>\n            No Tests scanned yet!\n          </Header>\n        </div>\n      )\n    }\n    return components\n  }\n\n  return (\n<Segment style={{ margin: 10 }}>\n  <div style={{marginTop: 10}}>\n    <Table celled textAlign='center' columns={4} compact basic padded striped>\n\n      <Table.Header color='blue'>\n        <Table.Row style={{backgroundColor: \"#054F9E\", opactiy: 0.8}}>\n          <Table.HeaderCell style={{color:'white'}}>Model</Table.HeaderCell>\n          <Table.HeaderCell style={{color:'white'}}>Brand</Table.HeaderCell>\n          <Table.HeaderCell style={{color:'white'}}>Adminitered</Table.HeaderCell>\n          <Table.HeaderCell style={{color:'white'}}>Result</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      {pcContext.scans.length !== 0\n      ?\n      <Table.Body>\n        {(pcContext.scans.map((s, i) => {\n          return (\n            <Table.Row>\n              <Table.Cell>{s.test[\"test-manufacturer\"]}</Table.Cell>\n              <Table.Cell>{s.test[\"test-model\"]}</Table.Cell>\n              <Table.Cell negative>\n                <a href={s.url}>\n                  {showDate(s)}\n                </a>\n              </Table.Cell>\n              <Table.Cell style={{backgroundColor: (s.test[\"test-end-bh\"][\"int\"] === 0 ? 'grey' : (s.test[\"result\"] === 'positive' ? 'green' : 'red'))}}>\n                {(s.test[\"test-end-bh\"][\"int\"] === 0 ? 'administered' : s.test[\"result\"])}\n              </Table.Cell>\n            </Table.Row>\n          )\n        }))}\n      </Table.Body>\n      :\n      <Header as='h5'  textAlign='center' style={{color: \"#054F9E\", marginLeft: 40, marginRight: 40}}>\n        No Tests scanned yet!\n      </Header>\n      }\n\n    </Table>\n  </div>\n</Segment>\n  )\n\n}\n\nexport default History\n\n// <Table.Body>\n//   <Table.Row>\n//     <Table.Cell>No Name Specified</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell negative>None</Table.Cell>\n//     <Table.Cell negative>hi</Table.Cell>\n//   </Table.Row>\n//   <Table.Row positive>\n//     <Table.Cell>Jimmy</Table.Cell>\n//     <Table.Cell>\n//       <Icon name='checkmark' />\n//       Approved\n//     </Table.Cell>\n//     <Table.Cell>None</Table.Cell>\n//   </Table.Row>\n//   <Table.Row>\n//     <Table.Cell>Jamie</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell positive>\n//       <Icon name='close' />\n//       Requires call\n//     </Table.Cell>\n//   </Table.Row>\n//   <Table.Row negative>\n//     <Table.Cell>Jill</Table.Cell>\n//     <Table.Cell>Unknown</Table.Cell>\n//     <Table.Cell>None</Table.Cell>\n//   </Table.Row>\n// </Table.Body>\n"]},"metadata":{},"sourceType":"module"}