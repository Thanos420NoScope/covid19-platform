{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/components/QRScan.js\";\nimport React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label, Modal, Header, Message, Popup, Select, Radio, Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactContext from '../contexts/PactContext';\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader';\n\nconst QRScan = () => {\n  const pactContext = useContext(PactContext);\n  const [showQR, setshowQR] = useState(true);\n  const [serial, setSerial] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [record, setRecord] = useState(\"\");\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async serial => {\n    setLoading(true);\n    const json = await pactContext.getRecord(serial);\n\n    if (json.message) {\n      //record does not exist, open init\n      setScanType('init');\n    } else {\n      //record exists, open end\n      setScanType('end');\n    }\n\n    setRecord(json);\n    setLoading(false);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, loading ? React.createElement(Loader, {\n    active: true,\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }) : scanType === \"\" ? showQR ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(QrReader, {\n    onError: e => console.log(e),\n    onScan: async data => {\n      if (data) {\n        setSerial(data);\n        setshowQR(false);\n        await getInfo(data);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 160,\n      marginTop: 5\n    },\n    onClick: () => setshowQR(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Close and Type\")) : React.createElement(Form.Field, {\n    style: {\n      width: \"240px\",\n      margin: \"0 auto\",\n      marginTop: \"10px\",\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      color: \"#18A33C\",\n      fontWeight: 'bold',\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Test Serial Number\", React.createElement(Popup, {\n    trigger: React.createElement(Icon, {\n      name: \"help circle\",\n      style: {\n        \"marginLeft\": \"2px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }),\n    position: \"top center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Popup.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Test Serial Number\"), React.createElement(Popup.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Scan QR code on test or enter number manually\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Input, {\n    style: {\n      width: \"240px\",\n      marginBottom: 3,\n      marginTop: 5\n    },\n    icon: \"hashtag\",\n    iconPosition: \"left\",\n    placeholder: \"Serial Number\",\n    value: serial,\n    onChange: e => setSerial(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(Button, {\n    style: {\n      backgroundColor: \"#18A33C\",\n      color: \"white\",\n      width: 240,\n      marginTop: 5\n    },\n    onClick: async () => await getInfo(serial),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Submit\")) : scanType === 'init' ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }));\n};\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/src/components/QRScan.js"],"names":["React","useState","useEffect","useContext","Fragment","useRef","Button","Grid","Input","Icon","Form","List","Label","Modal","Header","Message","Popup","Select","Radio","Tab","TextArea","Loader","PactContext","InitRecord","EndRecord","QrReader","QRScan","pactContext","showQR","setshowQR","serial","setSerial","loading","setLoading","record","setRecord","scanType","setScanType","getInfo","json","getRecord","message","marginTop","e","console","log","data","backgroundColor","color","width","margin","marginBottom","fontWeight","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, Fragment, useRef } from 'react';\nimport { Button, Grid, Input, Icon, Form, List, Label,\n   Modal, Header, Message, Popup, Select, Radio,\n   Tab, TextArea, Loader } from 'semantic-ui-react';\nimport PactContext from '../contexts/PactContext'\nimport InitRecord from './InitRecord';\nimport EndRecord from './EndRecord';\nimport QrReader from 'react-qr-reader'\n\n\nconst QRScan = () => {\n\n  const pactContext = useContext(PactContext);\n\n  const [showQR, setshowQR] = useState(true);\n  const [serial, setSerial] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [record, setRecord] = useState(\"\");\n  const [scanType, setScanType] = useState(\"\");\n\n  const getInfo = async (serial) => {\n    setLoading(true)\n    const json = await pactContext.getRecord(serial);\n    if (json.message) {\n      //record does not exist, open init\n      setScanType('init')\n    } else {\n      //record exists, open end\n      setScanType('end')\n    }\n    setRecord(json);\n    setLoading(false);\n  }\n\n  return (\n    <div style={{marginTop: 20}}>\n    {(loading ? <Loader active inline /> :\n      (scanType === \"\" ?\n        (showQR ?\n              <div>\n                <QrReader\n                  onError={(e) => console.log(e)}\n                  onScan={async (data) => {\n                    if (data) {\n                      setSerial(data);\n                      setshowQR(false);\n                      await getInfo(data);\n                    }\n                  }}\n                />\n                <Button\n                    style={{\n                      backgroundColor: \"#18A33C\",\n                      color: \"white\",\n                      width: 160,\n                      marginTop: 5\n                      }}\n                    onClick={() => setshowQR(false)}\n                  >\n                  Close and Type\n                </Button>\n              </div>\n              :\n              <Form.Field  style={{width:\"240px\", margin: \"0 auto\", marginTop: \"10px\", marginBottom: 0}} >\n                <label style={{color: \"#18A33C\", fontWeight: 'bold', marginBottom: 20}}>Test Serial Number\n                  <Popup\n                    trigger={\n                      <Icon name='help circle' style={{\"marginLeft\": \"2px\"}}/>\n                    }\n                    position='top center'\n                  >\n                    <Popup.Header>Test Serial Number</Popup.Header>\n                    <Popup.Content>Scan QR code on test or enter number manually</Popup.Content>\n                  </Popup>\n                </label>\n                <div>\n                  <Input\n                    style={{width:\"240px\", marginBottom: 3, marginTop: 5}}\n                    icon='hashtag'\n                    iconPosition='left'\n                    placeholder='Serial Number'\n                    value={serial}\n                    onChange={(e) => setSerial(e.target.value)}\n                  />\n                </div>\n                <Button\n                    style={{\n                      backgroundColor: \"#18A33C\",\n                      color: \"white\",\n                      width: 240,\n                      marginTop: 5\n                      }}\n                    onClick={async () => await getInfo(serial)}\n                  >\n                  Submit\n                </Button>\n              </Form.Field>\n            ) : (scanType === 'init' ? <div /> : <div />))\n    )}\n\n    </div>\n  )\n\n}\n\nexport default QRScan;\n"]},"metadata":{},"sourceType":"module"}