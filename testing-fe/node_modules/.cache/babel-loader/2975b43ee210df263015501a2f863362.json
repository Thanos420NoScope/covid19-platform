{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  unescape: unescape,\n  escape: escape,\n  encode: encode,\n  decode: decode\n};\n\nfunction unescape(str) {\n  return (str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/');\n}\n\nfunction escape(str) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction encode(str, encoding) {\n  return escape(Buffer.from(str, encoding || 'utf8').toString('base64'));\n}\n\nfunction decode(str, encoding) {\n  return Buffer.from(unescape(str), 'base64').toString(encoding || 'utf8');\n}","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/node_modules/base64-url/index.js"],"names":["module","exports","unescape","escape","encode","decode","str","slice","length","replace","encoding","Buffer","from","toString"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ,EAAEA,QADK;AAEfC,EAAAA,MAAM,EAAEA,MAFO;AAGfC,EAAAA,MAAM,EAAEA,MAHO;AAIfC,EAAAA,MAAM,EAAEA;AAJO,CAAjB;;AAOA,SAASH,QAAT,CAAmBI,GAAnB,EAAwB;AACtB,SAAO,CAACA,GAAG,GAAG,MAAMC,KAAN,CAAY,CAACD,GAAG,CAACE,MAAJ,GAAa,CAAd,IAAmB,CAA/B,CAAP,EACJC,OADI,CACI,IADJ,EACU,GADV,EAEJA,OAFI,CAEI,IAFJ,EAEU,GAFV,CAAP;AAGD;;AAED,SAASN,MAAT,CAAiBG,GAAjB,EAAsB;AACpB,SAAOA,GAAG,CAACG,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EACJA,OADI,CACI,KADJ,EACW,GADX,EAEJA,OAFI,CAEI,IAFJ,EAEU,EAFV,CAAP;AAGD;;AAED,SAASL,MAAT,CAAiBE,GAAjB,EAAsBI,QAAtB,EAAgC;AAC9B,SAAOP,MAAM,CAACQ,MAAM,CAACC,IAAP,CAAYN,GAAZ,EAAiBI,QAAQ,IAAI,MAA7B,EAAqCG,QAArC,CAA8C,QAA9C,CAAD,CAAb;AACD;;AAED,SAASR,MAAT,CAAiBC,GAAjB,EAAsBI,QAAtB,EAAgC;AAC9B,SAAOC,MAAM,CAACC,IAAP,CAAYV,QAAQ,CAACI,GAAD,CAApB,EAA2B,QAA3B,EAAqCO,QAArC,CAA8CH,QAAQ,IAAI,MAA1D,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = {\n  unescape: unescape,\n  escape: escape,\n  encode: encode,\n  decode: decode\n}\n\nfunction unescape (str) {\n  return (str + '==='.slice((str.length + 3) % 4))\n    .replace(/-/g, '+')\n    .replace(/_/g, '/')\n}\n\nfunction escape (str) {\n  return str.replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '')\n}\n\nfunction encode (str, encoding) {\n  return escape(Buffer.from(str, encoding || 'utf8').toString('base64'))\n}\n\nfunction decode (str, encoding) {\n  return Buffer.from(unescape(str), 'base64').toString(encoding || 'utf8')\n}\n"]},"metadata":{},"sourceType":"script"}