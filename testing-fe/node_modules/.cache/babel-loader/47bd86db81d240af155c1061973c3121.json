{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\n\nvar hash = require('object-hash');\n\nconst config = require('../config.json');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactCallStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testInfo: {},\n      txData: {},\n      loading: false,\n      txStatus: \"\",\n      screen: \"history\",\n      scans: []\n    };\n\n    this.getSavedScans = async () => {\n      let scans = await localStorage.getItem('scans');\n      console.log('init', scans);\n      scans = JSON.parse(scans);\n      console.log('init', scans);\n\n      if (scans === null) {\n        scans = [];\n        await localStorage.setItem('scans', JSON.stringify([]));\n      }\n\n      await this.setState({\n        scans: scans\n      });\n    };\n\n    this.wait = async timeout => {\n      return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n      });\n    };\n\n    this.setScreen = async name => {\n      await this.setState({\n        screen: name\n      });\n    };\n\n    this.getTest = async (pubKey, chainId) => {\n      await this.setState({\n        loading: true\n      });\n      const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"dummy-local\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (res.result.status === \"success\") {\n        await this.setState({\n          testInfo: res.result.data\n        });\n        await this.setState({\n          loading: false\n        });\n        return res.result.data;\n      } else {\n        await this.setState({\n          testInfo: \"failure\"\n        });\n        await this.setState({\n          loading: false\n        });\n        return \"failure\";\n      }\n    };\n\n    this.administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id, zip, country) => {\n      await this.setState({\n        loading: true\n      });\n      const patientJSON = {\n        name: name,\n        surname: surname,\n        dob: dob,\n        id: id\n      };\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(country)} ${JSON.stringify(zip)} ${JSON.stringify(hash(patientJSON))})`,\n        keyPairs: [{\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: [{\n            name: \"user.covid.REGISTERED-TEST\",\n            args: [pubKey]\n          }, {\n            name: `user.covid-gas-station.GAS_PAYER`,\n            args: [\"hi\", {\n              int: 1\n            }, 1.0]\n          }]\n        }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], chainId));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          //doc registered on blockchain, now add to db\n          await this.setState({\n            loading: false,\n            txStatus: 'success',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); // alert(\"The test was successfuly registered on Kadena mainnet\")\n          //SHOW A MESSAGE OF SUCCESS\n          // window.location.reload();\n          //tx unsuccessful\n        } else {\n          await this.setState({\n            loading: false,\n            txStatus: 'failure',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n          // window.location.reload();\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false,\n          txStatus: 'failure',\n          txData: pollRes[reqKey.requestKeys[0]]\n        }); // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n        // window.location.reload();\n      }\n    };\n\n    this.endTest = async (pubKey, privKey, chainId, result) => {\n      await this.setState({\n        loading: true\n      });\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.covid.end-test ${JSON.stringify(pubKey)} ${JSON.stringify(result)})`,\n        keyPairs: [{\n          publicKey: pubKey,\n          secretKey: privKey,\n          clist: [{\n            name: \"user.covid.REGISTERED-TEST\",\n            args: [pubKey]\n          }, {\n            name: `user.covid-gas-station.GAS_PAYER`,\n            args: [\"hi\", {\n              int: 1\n            }, 1.0]\n          }]\n        }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\", chainId, 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (reqKey) {\n        //check kadena tx status every 10 seconds until we get a response (success or fail)\n        var time = 180;\n        var pollRes;\n\n        while (time > 0) {\n          await this.wait(10000);\n          pollRes = await Pact.fetch.poll({\n            requestKeys: [reqKey.requestKeys[0]]\n          }, createAPIHost(hosts[0], chainId));\n\n          if (Object.keys(pollRes).length === 0) {\n            console.log('no return poll');\n            console.log(pollRes);\n            time = time - 10;\n          } else {\n            console.log(pollRes);\n            time = 0;\n          }\n        } //tx successful\n\n\n        if (pollRes[reqKey.requestKeys[0]].result.status === \"success\") {\n          //doc registered on blockchain, now add to db\n          await this.setState({\n            loading: false,\n            txStatus: 'success',\n            txData: pollRes[reqKey.requestKeys[0]]\n          }); //tx unsuccessful\n        } else {\n          await this.setState({\n            loading: false,\n            txStatus: 'failure',\n            txData: pollRes[reqKey.requestKeys[0]]\n          });\n        }\n      } else {\n        //blockchain call had formatting issues\n        await this.setState({\n          loading: false,\n          txStatus: 'failure',\n          txData: pollRes[reqKey.requestKeys[0]]\n        });\n      }\n    };\n\n    this.handleQRScan = async qrData => {\n      const pastScans = this.state.scans.slice();\n      console.log(qrData[\"chainId\"]);\n      let reqKey = qrData[\"url\"].split(\"\").reverse().join(\"\");\n      const ci = qrData[\"chainId\"].toString();\n      reqKey = reqKey.substring(0, reqKey.indexOf(\"/\")).split(\"\").reverse().join(\"\");\n      let test = await this.getTest(qrData[\"pubKey\"], ci);\n      console.log(test);\n      const newScan = {\n        chainId: ci,\n        url: qrData[\"url\"],\n        pubKey: qrData[\"pubKey\"],\n        key: Math.floor(Math.random() * 100000000000),\n        reqKey: reqKey,\n        test: test\n      };\n      pastScans.push(newScan);\n      await localStorage.setItem('scans', JSON.stringify(pastScans));\n      await this.setState({\n        scans: pastScans,\n        screen: 'history'\n      });\n    };\n\n    this.updateScans = async () => {\n      const pastScans = this.state.scans.slice();\n      const updatedTests = [];\n\n      for (let i = 0; i < pastScans.length; i++) {\n        if (pastScans[i]['test']['result'] !== \"\") {\n          updatedTests.push(pastScans[i]);\n        } else {\n          const updatedTest = await this.getTest(pastScans[i].pubKey, pastScans[i].chainId);\n          pastScans[i].test = updatedTest;\n        }\n      }\n\n      await this.setState({\n        scans: pastScans\n      });\n      await localStorage.setItem('scans', JSON.stringify(pastScans));\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        getTest: this.getTest,\n        administerTest: this.administerTest,\n        endTest: this.endTest,\n        setScreen: this.setScreen,\n        getSavedScans: this.getSavedScans,\n        handleQRScan: this.handleQRScan,\n        updateScans: this.updateScans\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js"],"names":["React","Pact","hash","require","config","Context","createContext","hosts","createAPIHost","network","chainId","PactCallStore","Component","state","testInfo","txData","loading","txStatus","screen","scans","getSavedScans","localStorage","getItem","console","log","JSON","parse","setItem","stringify","setState","wait","timeout","Promise","resolve","setTimeout","setScreen","name","getTest","pubKey","res","fetch","local","networkId","pactCode","keyPairs","covidAdminKeys","clist","args","meta","lang","mkMeta","Math","round","Date","getTime","result","status","data","administerTest","privKey","ageGroup","gender","surname","dob","id","zip","country","patientJSON","reqKey","send","publicKey","secretKey","int","time","pollRes","poll","requestKeys","Object","keys","length","endTest","handleQRScan","qrData","pastScans","slice","split","reverse","join","ci","toString","substring","indexOf","test","newScan","url","key","floor","random","push","updateScans","updatedTests","i","updatedTest","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nvar hash = require('object-hash');\nconst config = require('../config.json')\n\nconst Context = React.createContext();\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactCallStore extends React.Component {\n\n  state = {\n    testInfo: {},\n    txData: {},\n    loading: false,\n    txStatus: \"\",\n    screen: \"history\",\n    scans: []\n  }\n\n  getSavedScans = async () => {\n    let scans = await localStorage.getItem('scans');\n    console.log('init', scans)\n    scans = JSON.parse(scans)\n    console.log('init', scans)\n    if (scans === null) {\n      scans = [];\n      await localStorage.setItem('scans', JSON.stringify([]));\n    }\n    await this.setState({ scans: scans })\n  }\n\n  wait = async (timeout) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, timeout);\n    });\n  }\n\n  setScreen = async (name) => {\n    await this.setState({ screen: name });\n  }\n\n  getTest = async (pubKey, chainId) => {\n    await this.setState({ loading: true })\n    const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}],\n        meta: Pact.lang.mkMeta(\"dummy-local\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId))\n    if (res.result.status === \"success\") {\n      await this.setState({ testInfo: res.result.data })\n      await this.setState({ loading: false })\n      return res.result.data;\n    } else {\n      await this.setState({ testInfo: \"failure\" })\n      await this.setState({ loading: false })\n      return \"failure\"\n    }\n  }\n\n  administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id, zip, country) => {\n    await this.setState({ loading: true })\n    const patientJSON = {\n      name: name,\n      surname: surname,\n      dob: dob,\n      id: id\n    }\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(country)} ${JSON.stringify(zip)} ${JSON.stringify(hash(patientJSON))})`,\n        keyPairs: [\n          {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: [\n              {\n                name: \"user.covid.REGISTERED-TEST\",\n                args: [pubKey]\n              },\n              {\n                name: `user.covid-gas-station.GAS_PAYER`,\n                args: [\"hi\", {int: 1}, 1.0]\n              }\n            ]\n          }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId));\n        if (reqKey) {\n          //check kadena tx status every 10 seconds until we get a response (success or fail)\n          var time = 180;\n          var pollRes;\n          while (time > 0) {\n            await this.wait(10000);\n            pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], chainId));\n            if (Object.keys(pollRes).length === 0) {\n              console.log('no return poll');\n              console.log(pollRes)\n              time = time - 10\n            } else {\n              console.log(pollRes);\n              time = 0;\n            }\n          }\n          //tx successful\n          if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n            //doc registered on blockchain, now add to db\n            await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n            // alert(\"The test was successfuly registered on Kadena mainnet\")\n            //SHOW A MESSAGE OF SUCCESS\n            // window.location.reload();\n          //tx unsuccessful\n          } else {\n            await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n            // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n            // window.location.reload();\n          }\n        } else {\n          //blockchain call had formatting issues\n          await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n          // alert(\"there was a problem processing your transaction on Kadena mainnet\")\n          // window.location.reload();\n        }\n  }\n\n  endTest = async (pubKey, privKey, chainId, result) => {\n    await this.setState({ loading: true })\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.covid.end-test ${JSON.stringify(pubKey)} ${JSON.stringify(result)})`,\n        keyPairs: [\n          {\n            publicKey: pubKey,\n            secretKey: privKey,\n            clist: [\n              {\n                name: \"user.covid.REGISTERED-TEST\",\n                args: [pubKey]\n              },\n              {\n                name: `user.covid-gas-station.GAS_PAYER`,\n                args: [\"hi\", {int: 1}, 1.0]\n              }\n            ]\n          }],\n        meta: Pact.lang.mkMeta(\"covid-gas-payer\",chainId,0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId));\n        if (reqKey) {\n          //check kadena tx status every 10 seconds until we get a response (success or fail)\n          var time = 180;\n          var pollRes;\n          while (time > 0) {\n            await this.wait(10000);\n            pollRes = await Pact.fetch.poll({requestKeys: [reqKey.requestKeys[0]]}, createAPIHost(hosts[0], chainId));\n            if (Object.keys(pollRes).length === 0) {\n              console.log('no return poll');\n              console.log(pollRes)\n              time = time - 10\n            } else {\n              console.log(pollRes);\n              time = 0;\n            }\n          }\n          //tx successful\n          if (pollRes[reqKey.requestKeys[0]].result.status === \"success\"){\n            //doc registered on blockchain, now add to db\n            await this.setState({loading: false, txStatus: 'success', txData: pollRes[reqKey.requestKeys[0]]})\n          //tx unsuccessful\n          } else {\n            await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n          }\n        } else {\n          //blockchain call had formatting issues\n          await this.setState({loading: false, txStatus: 'failure', txData: pollRes[reqKey.requestKeys[0]]})\n        }\n  }\n\n  handleQRScan = async (qrData) => {\n    const pastScans = this.state.scans.slice()\n    console.log(qrData[\"chainId\"])\n    let reqKey = qrData[\"url\"].split(\"\").reverse().join(\"\");\n    const ci = qrData[\"chainId\"].toString()\n    reqKey = reqKey.substring(0, reqKey.indexOf(\"/\")).split(\"\").reverse().join(\"\")\n    let test = await this.getTest(qrData[\"pubKey\"], ci)\n    console.log(test)\n    const newScan = {\n      chainId: ci,\n      url: qrData[\"url\"],\n      pubKey: qrData[\"pubKey\"],\n      key: Math.floor(Math.random() *  100000000000),\n      reqKey: reqKey,\n      test: test\n    }\n    pastScans.push(newScan);\n\n    await localStorage.setItem('scans', JSON.stringify(pastScans))\n    await this.setState({ scans: pastScans, screen: 'history' })\n}\n\nupdateScans = async () => {\n  const pastScans = this.state.scans.slice()\n  const updatedTests = []\n  for (let i = 0; i < pastScans.length; i++) {\n    if (pastScans[i]['test']['result'] !== \"\") {\n      updatedTests.push(pastScans[i])\n    } else {\n      const updatedTest = await this.getTest(pastScans[i].pubKey, pastScans[i].chainId)\n      pastScans[i].test = updatedTest\n    }\n  }\n  await this.setState({ scans: pastScans })\n  await localStorage.setItem('scans', JSON.stringify(pastScans))\n}\n\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          getTest: this.getTest,\n          administerTest: this.administerTest,\n          endTest: this.endTest,\n          setScreen: this.setScreen,\n          getSavedScans: this.getSavedScans,\n          handleQRScan: this.handleQRScan,\n          updateScans: this.updateScans\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}