{"ast":null,"code":"var _jsxFileName = \"/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js\";\nimport React from 'react';\nimport Pact from 'pact-lang-api';\n\nvar hash = require('object-hash');\n\nconst config = require('../config.json');\n\nconst Context = React.createContext();\nconst hosts = [\"us1\", \"us2\"];\n\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`;\n\nexport class PactCallStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testInfo: {},\n      loading: false\n    };\n\n    this.getTest = async pubKey => {\n      await this.setState({\n        loading: true\n      });\n      const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }],\n        meta: Pact.lang.mkMeta(\"dummy-local\", \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], \"0\"));\n\n      if (res.result.status === \"success\") {\n        await this.setState({\n          testInfo: res.result.data\n        });\n        return res.result.data;\n      } else {\n        await this.setState({\n          testInfo: \"failure\"\n        });\n        return \"failure\";\n      }\n\n      await this.setState({\n        loading: false\n      });\n    };\n\n    this.administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id) => {\n      await this.setState({\n        loading: true\n      });\n      const patientJSON = {\n        name: name,\n        surname: surname,\n        dob: dob,\n        id: id\n      };\n      const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode: `(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(hash(patientJSON))})`,\n        keyPairs: [{ ...config.covidAdminKeys,\n          clist: {\n            name: \"coin.GAS\",\n            args: []\n          }\n        }, { ...config.covidAdminKeys,\n          clist: {\n            name: \"user.covid.REGISTERED-TEST\",\n            args: [pubKey]\n          }\n        }],\n        meta: Pact.lang.mkMeta(pubKey, \"0\", 0.00000001, 10000, Math.round(new Date().getTime() / 1000) - 15, 28800)\n      }, createAPIHost(hosts[0], chainId));\n\n      if (reqKey) {\n        console.log(reqKey);\n      }\n\n      await this.setState({\n        loading: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: { ...this.state,\n        getTest: this.getTest,\n        administerTest: this.administerTest\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nexport default Context;","map":{"version":3,"sources":["/Users/francescomelpignano/Desktop/kadena/code/covid19-kda/frontend/src/contexts/PactCallContext.js"],"names":["React","Pact","hash","require","config","Context","createContext","hosts","createAPIHost","network","chainId","PactCallStore","Component","state","testInfo","loading","getTest","pubKey","setState","res","fetch","local","networkId","pactCode","JSON","stringify","keyPairs","covidAdminKeys","clist","name","args","meta","lang","mkMeta","Math","round","Date","getTime","result","status","data","administerTest","privKey","ageGroup","gender","surname","dob","id","patientJSON","reqKey","send","console","log","render","props","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Pact from 'pact-lang-api';\nvar hash = require('object-hash');\nconst config = require('../config.json')\n\nconst Context = React.createContext();\n\nconst hosts = [\"us1\", \"us2\"]\nconst createAPIHost = (network, chainId) => `https://${network}.testnet.chainweb.com/chainweb/0.0/testnet04/chain/${chainId}/pact`\n\nexport class PactCallStore extends React.Component {\n\n  state = {\n    testInfo: {},\n    loading: false\n  }\n\n  getTest = async (pubKey) => {\n    await this.setState({ loading: true })\n    const res = await Pact.fetch.local({\n        networkId: \"testnet04\",\n        // pactCode:`(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        pactCode: `(user.covid.get-record ${JSON.stringify(pubKey)})`,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}],\n        meta: Pact.lang.mkMeta(\"dummy-local\",\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], \"0\"))\n    if (res.result.status === \"success\") {\n      await this.setState({ testInfo: res.result.data })\n      return res.result.data;\n    } else {\n      await this.setState({ testInfo: \"failure\" })\n      return \"failure\"\n    }\n    await this.setState({ loading: false })\n  }\n\n  administerTest = async (pubKey, privKey, chainId, ageGroup, gender, name, surname, dob, id) => {\n    await this.setState({ loading: true })\n    const patientJSON = {\n      name: name,\n      surname: surname,\n      dob: dob,\n      id: id\n    }\n    const reqKey = await Pact.fetch.send({\n        networkId: \"testnet04\",\n        pactCode:`(user.covid.administer-test ${JSON.stringify(pubKey)} ${JSON.stringify(ageGroup)} ${JSON.stringify(gender)} ${JSON.stringify(hash(patientJSON))})`,\n        keyPairs: [{...config.covidAdminKeys, clist: {name: \"coin.GAS\", args: []}}, {...config.covidAdminKeys, clist: {name: \"user.covid.REGISTERED-TEST\", args: [pubKey]}}],\n        meta: Pact.lang.mkMeta(pubKey,\"0\",0.00000001,10000,(Math.round((new Date).getTime()/1000)-15), 28800)}, createAPIHost(hosts[0], chainId));\n    if (reqKey) {\n      console.log(reqKey);\n    }\n    await this.setState({loading: false})\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          ...this.state,\n          getTest: this.getTest,\n          administerTest: this.administerTest\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}